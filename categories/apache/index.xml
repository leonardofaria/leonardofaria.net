<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>apache on Leonardo Faria</title><link>https://hugo.leonardofaria.net/categories/apache/</link><description>Recent content in apache on Leonardo Faria</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Jul 2008 01:48:18 -0300</lastBuildDate><atom:link href="https://hugo.leonardofaria.net/categories/apache/index.xml" rel="self" type="application/rss+xml"/><item><title>Protegendo projetos com o .htaccess</title><link>https://hugo.leonardofaria.net/2008/07/16/protegendo-projetos-com-o-htaccess/</link><pubDate>Wed, 16 Jul 2008 01:48:18 -0300</pubDate><guid>https://hugo.leonardofaria.net/2008/07/16/protegendo-projetos-com-o-htaccess/</guid><description>&lt;p>O Apache pode te ajudar a proteger um projeto com seu sistema de autenticação. E isso é mais fácil do que você pensa. Para tal, crie um arquivo .htaccess com o seguinte conteúdo:&lt;/p>
&lt;pre>&lt;code>AuthUserFile /home/leonardo/public_html/project/.htpasswd
AuthGroupFile /dev/null
AuthName &amp;quot;Restricted Access&amp;quot;
AuthType Basic
&amp;lt;limit GET&amp;gt;
require valid-user
&amp;lt;/limit&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Após isso, crie um .htpasswd com os dados de usuário e senha (atenção ao caminho do arquivo). A senha é criptografada e o conteúdo do arquivo é algo como o seguinte:&lt;/p>
&lt;pre>&lt;code>leo:4tHAiRmQ4OpjM
&lt;/code>&lt;/pre>&lt;p>Para criptografar a senha use um dos &lt;a href="http://www.kxs.net/support/htaccess_pw.html">vários&lt;/a> serviços &lt;a href="http://shop.alterlinks.com/htpasswd/htpasswd.php">por aí&lt;/a> existentes. Para proteger um projeto em Rails, a solução também funciona bem, desde que seu .htaccess esteja na pasta public de sua aplicação&lt;/p></description></item><item><title>Eliminando conteúdo para buscas</title><link>https://hugo.leonardofaria.net/2006/04/05/eliminando-conteudo-para-buscas/</link><pubDate>Wed, 05 Apr 2006 22:09:05 -0300</pubDate><guid>https://hugo.leonardofaria.net/2006/04/05/eliminando-conteudo-para-buscas/</guid><description>&lt;p>Sistemas de busca, ao trabalhar, lêem um arquivo “robots.txt” (deixado na raiz do servidor). Esse arquivo especifica para o spider quais arquivos devem aparecer na busca.&lt;/p>
&lt;p>Nesse artigo, veremos como excluir determinada pasta de uma search engine.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">User-agent: *
Disallow: login.php
Disallow: /images/
Disallow: /cgi-bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A primeira linha, User-agent: determina para qual robot o conteúdo será desabilitado. O asterisco representa todos eles. Para excluir somente o Google, use googlebot&lt;/p>
&lt;p>A segunda, terceira e quarta linhas excluem da busca, todos os arquivos da pasta images e o arquivo login.php, além do arquivos da pasta cgi-bin&lt;/p>
&lt;p>Nota: Esse arquivo deve ser criado em formato de texto UNIX. Procure um editor com suporte a mudança de formato de texto.&lt;/p>
&lt;p>&lt;strong>Conclusão:&lt;/strong>&lt;br>
Esse rápido artigo mostrou como excluir um determinado conteúdo de um site. Isso pode ser útil para proteger arquivos de configuração e imagens em nosso servidor.&lt;/p>
&lt;p>&lt;strong>Mais do mesmo:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.searchengineworld.com/cgi-bin/robotcheck.cgi">Robots.txt Validator&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Ocultando a tecnologia de um site usando mod_rewrite</title><link>https://hugo.leonardofaria.net/2006/04/05/ocultando-a-tecnologia-de-um-site-usando-mod_rewrite/</link><pubDate>Wed, 05 Apr 2006 22:08:58 -0300</pubDate><guid>https://hugo.leonardofaria.net/2006/04/05/ocultando-a-tecnologia-de-um-site-usando-mod_rewrite/</guid><description>&lt;p>No artigo anterior, sugeri a mudança na configuração do httpd.conf para ocultar qual a tecnologia de um site. Isso pode ser útil em dois casos. O primeiro, por uma questão estética (não tão relevante) e a segunda por uma questão de segurança. Já que não se conhece como o site foi feito, ataques com SQL Injection, por exemplo, podem ser atrasados.&lt;/p>
&lt;p>Mas voltando ao conteúdo desse artigo, o Apache oferece outra forma de maquiar uma URL. E isso é através do mod_rewrite. Além de oferecer a segurança em não mostrar a extensão de um arquivo, o mod_rewrite permite a criação de URLS ‘fáceis&amp;rsquo; de entender e não monstros do tipo &lt;code>index.php?id=7&amp;amp;date=05/02/97&amp;amp;page=6&lt;/code>&lt;/p>
&lt;p>O mod_rewrite não passa de um módulo (que deve estar ativado no httpd.conf) que permite, através de expressões regulares, redirecionar o usuário. Mas, como ele funciona? &lt;!--more-->&lt;/p>
&lt;p>A configuração das URLs amigáveis envolve a criação de um arquivo .htaccess. Esse arquivo deve estar no diretório no qual deve ser trabalhado. Vamos a configuração:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-apache" data-lang="apache">&lt;span style="color:#0086b3">RewriteEngine&lt;/span> &lt;span style="color:#000;font-weight:bold">On&lt;/span>
&lt;span style="color:#0086b3">RewriteRule&lt;/span> ^(noticias)/(.+)$ index.php?id=$1&amp;amp;go=$2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Vamos entender o que faz as linhas acima.&lt;br>
A primeira aciona o módulo. Já a segunda é marcada por três tabulações:&lt;/p>
&lt;p>A primeira tabulação traz a palavra RewriteRule, que indica que essa linha possui uma regra de redirecionamento.&lt;/p>
&lt;p>A segunda tabulação monta a URL virtual. Segundo essa regra, qualquer URL noticias/teste será redirecionado para a terceira tabulação, index.php?id=$1&amp;amp;go=$2. Observe que $1 e $2, usadas na terceira tabulação, são na verdade a primeira (noticias) e a segunda (qualquer palavra) partes da URL virtual.&lt;/p>
&lt;p>&lt;strong>Mais do mesmo:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://guia-er.sourceforge.net/guia-er.html">Continue lendo sobre expressões regulares.&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.brunotorres.net/web/urls">Gerenciamento de URLs&lt;/a> e &lt;a href="http://www.brunotorres.net/web/urls-again">URLs amigáveis – Esclarecendo dúvidas&lt;/a>, por Bruno Torres&lt;/li>
&lt;li>&lt;a href="http://httpd.apache.org/docs-2.0/mod/mod_rewrite.html">Documentação do mod_rewrite&lt;/a>, pelo Apache&lt;/li>
&lt;/ul></description></item><item><title>Editando o httpd.conf para ocultar a tecnologia de um site</title><link>https://hugo.leonardofaria.net/2006/04/05/editando-o-httpdconf-para-ocultar-a-tecnologia-de-um-site/</link><pubDate>Wed, 05 Apr 2006 22:00:45 -0300</pubDate><guid>https://hugo.leonardofaria.net/2006/04/05/editando-o-httpdconf-para-ocultar-a-tecnologia-de-um-site/</guid><description>&lt;p>Em nosso trabalho, deparamos com arquivos do tipo index.do, index.foo, index.123. Mas como isso é feito?&lt;br>
O Apache permite alterar o suporte das extensões suportadas por ele.&lt;br>
O arquivo httpd.conf é o principal gerenciador de configurações do servidor. É nele que vamos trabalhar.&lt;/p>
&lt;p>Devemos procurar pela seguinte linha (aproximdamente na linha 220):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-apache" data-lang="apache">&lt;span style="color:#0086b3">AddType&lt;/span> application/x-httpd-php .php .php4 .php3 .phtml .leo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Essa é linha responsável por definir quais extensões serão executadas com suporte a PHP. Observe que acrescentei a extensão .leo.&lt;br>
A partir de agora, index.leo, por exemplo, será processado com PHP. Logo, nele posso escrever toda minha aplicação. Mas lembre-se, o suporte só estará funcionando após a reinicialização do Apache.&lt;/p>
&lt;p>&lt;strong>[update]&lt;/strong> Isso também pode ser feito em um .htaccess&lt;/p></description></item></channel></rss>