<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Leonardo Faria</title><link>https://hugo.leonardofaria.net/categories/javascript/</link><description>Recent content in javascript on Leonardo Faria</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Feb 2022 01:00:00 +0000</lastBuildDate><atom:link href="https://hugo.leonardofaria.net/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Building TypeScript definitions on demand</title><link>https://hugo.leonardofaria.net/2022/02/07/building-typescript-definitions-on-demand/</link><pubDate>Mon, 07 Feb 2022 01:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2022/02/07/building-typescript-definitions-on-demand/</guid><description>&lt;p>I recently came across an interesting problem: is it possible to dynamically create TypeScript definitions for a React component library that doesn&amp;rsquo;t use TypeScript at all? Something like a &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped package&lt;/a> for a private NPM package?&lt;/p>
&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>Let me detail the problem a bit better. Consider the Button component below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#000;font-weight:bold">import&lt;/span> PropTypes from &lt;span style="color:#d14">&amp;#34;prop-types&amp;#34;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">const&lt;/span> Button &lt;span style="color:#000;font-weight:bold">=&lt;/span> ({ appearance, children, ...props }) =&amp;gt; {
&lt;span style="color:#000;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#000080">button&lt;/span> &lt;span style="color:#008080">className&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>{&lt;span style="color:#d14">`button--&lt;/span>&lt;span style="color:#d14">${&lt;/span>appearance&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">`&lt;/span>} {&lt;span style="color:#008080">...props&lt;/span>}&amp;gt;
{children}
&amp;lt;/&lt;span style="color:#000080">button&lt;/span>&amp;gt;
);
};
Button.propTypes &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#998;font-style:italic">/** Type of the button */&lt;/span>
appearance&lt;span style="color:#000;font-weight:bold">:&lt;/span> PropTypes.oneOf([&lt;span style="color:#d14">&amp;#34;primary&amp;#34;&lt;/span>, &lt;span style="color:#d14">&amp;#34;secondary&amp;#34;&lt;/span>]),
&lt;span style="color:#998;font-style:italic">/** Content for the button */&lt;/span>
children&lt;span style="color:#000;font-weight:bold">:&lt;/span> PropTypes.node.isRequired
};
Button.displayName &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;Button&amp;#39;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">export&lt;/span> &lt;span style="color:#000;font-weight:bold">default&lt;/span> Button;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This component is very straightforward: a &lt;code>&amp;lt;button&amp;gt;&lt;/code> that will be accordingly styled with the value of appearance.&lt;/p>
&lt;p>Now imagine that a new developer joined the company and they shipped their very first feature with the following Button:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&amp;lt;&lt;span style="color:#000080">Button&lt;/span> &lt;span style="color:#008080">variant&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;link&amp;#34;&lt;/span>&amp;gt;Buy now&amp;lt;/&lt;span style="color:#000080">Button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The new developer used to work with &lt;a href="https://mui.com/components/buttons/">Material UI&lt;/a> and &lt;code>variant=&amp;quot;link&amp;quot;&lt;/code> came from their old days. No one noticed that the Button didn&amp;rsquo;t look like the others in the application.&lt;/p>
&lt;p>It would be great to have a warning in our editor mentioning that &lt;code>variant&lt;/code> is not a valid prop for &lt;code>&amp;lt;Button&amp;gt;&lt;/code>. It would be great to have an autocomplete feature in our editor, so the developer could learn the component API as they work in the codebase. TypeScript solves these problems; however, the codebase doesn&amp;rsquo;t use TS.&lt;/p>
&lt;p>In addition, the Button is imported from a private NPM package. If the repository and packages were public, probably someone would create definitions and add them in the &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped&lt;/a> repository.&lt;/p>
&lt;p>Going back to the initial question of this post: is it possible to dynamically create TypeScript definitions for a React component library that doesn&amp;rsquo;t use TypeScript at all? YES!&lt;/p>
&lt;h2 id="the-solution">The solution&lt;/h2>
&lt;p>I am using the &lt;a href="https://www.npmjs.com/package/react-to-typescript-definitions">react-to-typescript-definitions&lt;/a> package to create definitions from the compiled files. The tool can map most PropTypes (&lt;code>any&lt;/code>, &lt;code>array&lt;/code>, &lt;code>bool&lt;/code>, &lt;code>func&lt;/code>, &lt;code>number&lt;/code>, &lt;code>object&lt;/code>, &lt;code>string&lt;/code>, &lt;code>node&lt;/code>, &lt;code>element&lt;/code>, &lt;code>oneOfType&lt;/code>, &lt;code>arrayOf&lt;/code>, &lt;code>symbol&lt;/code>, &lt;code>shape&lt;/code>) and identify the required ones. The package partially support &lt;code>oneOf&lt;/code> PropType and can even re-use your comments.&lt;/p>
&lt;p>You can create definitions from the command line or import the functionality into a script with this tool. Here is one example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">import&lt;/span> { generateFromFile } from &lt;span style="color:#d14">&amp;#34;react-to-typescript-definitions&amp;#34;&lt;/span>;
generateFromFile(&lt;span style="color:#000;font-weight:bold">null&lt;/span>, &lt;span style="color:#d14">&amp;#34;Button.js&amp;#34;&lt;/span>, {}, &lt;span style="color:#d14">&amp;#34;react&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function &lt;code>generateFromFile&lt;/code> will return something like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">export&lt;/span> type ButtonAppearance &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;primary&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#d14">&amp;#34;secondary&amp;#34;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">export&lt;/span> &lt;span style="color:#000;font-weight:bold">interface&lt;/span> ButtonProps {
&lt;span style="color:#998;font-style:italic">// All other props
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> [x&lt;span style="color:#000;font-weight:bold">:&lt;/span>string]&lt;span style="color:#000;font-weight:bold">:&lt;/span> any;
&lt;span style="color:#998;font-style:italic">/**
&lt;/span>&lt;span style="color:#998;font-style:italic"> * Type of the button
&lt;/span>&lt;span style="color:#998;font-style:italic"> */&lt;/span>
appearance&lt;span style="color:#000;font-weight:bold">?:&lt;/span> ButtonAppearance;
&lt;span style="color:#998;font-style:italic">/**
&lt;/span>&lt;span style="color:#998;font-style:italic"> * Content for the button
&lt;/span>&lt;span style="color:#998;font-style:italic"> */&lt;/span>
children&lt;span style="color:#000;font-weight:bold">:&lt;/span> React.ReactNode;
}
&lt;span style="color:#000;font-weight:bold">export&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> Button&lt;span style="color:#000;font-weight:bold">:&lt;/span> React.FC&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>ButtonProps&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A few highlights:
The tool reused the comments (&amp;ldquo;Type of the button&amp;rdquo;, &amp;ldquo;Content for the button&amp;rdquo;) from the original component;
The tool identified appearance as optional and children as required props;
The tool created a variable with the possible values of appearance;&lt;/p>
&lt;h3 id="in-real-life">In real life&lt;/h3>
&lt;p>We have two options of usage of this package.&lt;/p>
&lt;h4 id="cli">CLI&lt;/h4>
&lt;p>CLI can be helpful for one-off scenarios or for when you want to test things out. The example that I posted above could be created by running:&lt;/p>
&lt;pre>&lt;code>cat src/components/Button/Button.js | yarn --silent react2dts --top-level-module Button
&lt;/code>&lt;/pre>&lt;h4 id="node-module">Node module&lt;/h4>
&lt;p>Importing the package into your toolbox scripts gives you the flexibility to customize what needs definitions and define what to do with the data. Here is what I am doing:&lt;/p>
&lt;p>I created a script that imports all components from my main &lt;code>index.js&lt;/code> file (&lt;code>import * as componentLibrary from './src/index.js';&lt;/code>). This &lt;code>index.js&lt;/code> looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">export&lt;/span> { &lt;span style="color:#000;font-weight:bold">default&lt;/span> as Avatar } from &lt;span style="color:#d14">&amp;#39;./components/Avatar&amp;#39;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">export&lt;/span> { &lt;span style="color:#000;font-weight:bold">default&lt;/span> as Badge } from &lt;span style="color:#d14">&amp;#39;./components/Badge&amp;#39;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">export&lt;/span> { &lt;span style="color:#000;font-weight:bold">default&lt;/span> as Button } from &lt;span style="color:#d14">&amp;#39;./components/Button&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For each of these components, I call the &lt;code>generateFromFile&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">*&lt;/span> as componentLibrary from &lt;span style="color:#d14">&amp;#39;./src/index.js&amp;#39;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">let&lt;/span> definitionsContent &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>;
&lt;span style="color:#000;font-weight:bold">const&lt;/span> components &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0086b3">Object&lt;/span>.keys(componentLibrary);
components.forEach((component) =&amp;gt; {
&lt;span style="color:#000;font-weight:bold">if&lt;/span> (
&lt;span style="color:#000;font-weight:bold">typeof&lt;/span> componentLibrary[component] &lt;span style="color:#000;font-weight:bold">===&lt;/span> &lt;span style="color:#d14">&amp;#39;function&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
componentLibrary[component].filename &lt;span style="color:#000;font-weight:bold">!==&lt;/span> &lt;span style="color:#000;font-weight:bold">undefined&lt;/span>
) {
&lt;span style="color:#000;font-weight:bold">const&lt;/span> definitions &lt;span style="color:#000;font-weight:bold">=&lt;/span> generateFromFile(
&lt;span style="color:#000;font-weight:bold">null&lt;/span>,
componentLibrary[component].filename,
{},
&lt;span style="color:#d14">&amp;#39;react&amp;#39;&lt;/span>
);
definitionsContent &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`&lt;/span>&lt;span style="color:#d14">${&lt;/span>definitionsContent&lt;span style="color:#d14">}${&lt;/span>definitions&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">`&lt;/span>;
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>definitionsContent&lt;/code> variable might have some duplicated content, for example, multiple &lt;code>import * as React from 'react';&lt;/code>. After cleaning this, I store the content of this variable in the &lt;code>dist/es/index.d.ts&lt;/code>. Finally, in the &lt;code>package.json&lt;/code>, I mention the location of the types:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;module&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;dist/es/index.js&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;types&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;dist/es/index.d.ts&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;files&amp;#34;&lt;/span>: [
&lt;span style="color:#d14">&amp;#34;dist/*&amp;#34;&lt;/span>
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This script is executed in CI environmnent. When someone publishes a new version of the component library:&lt;/p>
&lt;ol>
&lt;li>We build the package using rollup, saving the files in the &lt;code>dist&lt;/code> folder;&lt;/li>
&lt;li>We execute the script to create the TypeScript definitions;&lt;/li>
&lt;li>We run &lt;code>npm publish&lt;/code> (currently with Lerna)&lt;/li>
&lt;li>We make release notes with Lerna&lt;/li>
&lt;/ol>
&lt;p>What do you think of this solution? Let me know in the comments.&lt;/p></description></item><item><title>My experience using Lighthouse in the real world</title><link>https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/</link><pubDate>Mon, 30 Nov 2020 05:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/</guid><description>&lt;p>Lighthouse has been part of my daily work for the last few months and I shared some snippets in my last few posts. For this particular post, it is time to share how I am using Lighthouse in a product used by millions of people and what I have discovered during this process.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse.jpg" alt="Lighthouse photo by Robert Wiedemann">&lt;/p>
&lt;p>&lt;em>Disclaimers&lt;/em>: 1. This content may be reviewed in the future as I learn more about web performance and Lighthouse; 2. Do not take this post as professional/legal advice; 3. Do not take my comments on tech X or Y as attacks to tech X or Y.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="use-existing-tools-before-creating-your-own">Use existing tools before creating your own&lt;/h2>
&lt;p>It sounds obvious but it doesn’t hurt to repeat the message: do not reinvent the wheel (until you absolutely need to). You can start &lt;a href="https://support.google.com/webmasters/answer/9205520">monitoring Core Web Vitals for free&lt;/a> in the Google Search Console.&lt;/p>
&lt;p>If this is not enough, or if you have a complex web app behind authentication, or any other scenarios, you can start by using a tool listed in the &lt;a href="https://github.com/GoogleChrome/lighthouse#lighthouse-integrations-in-web-perf-services">Lighthouse integrations docs&lt;/a>. From that list, I can only speak of &lt;a href="https://calibreapp.com">Calibre&lt;/a> as I have not used the others. I am not affiliated with them.&lt;/p>
&lt;p>Using Calibre, you can schedule Lighthouse tests, create performance budgets, see pretty charts, and learn what performance looks like in your product. The relevant information is easy to find and their product has a very polished UI, however, at a certain point, you may want more and that means ‘custom development’.&lt;/p>
&lt;h2 id="the-tooling-in-place">The tooling in place&lt;/h2>
&lt;p>We have decided to create our own tool at &lt;a href="https://thinkific.com">Thinkific&lt;/a> in order to run Lighthouse tests to be aligned with the monitoring stack and give us more flexibility. Here are some details:&lt;/p>
&lt;ul>
&lt;li>We run tests every hour;&lt;/li>
&lt;li>We run tests in our Critical User Journeys: these are important routes of our application used by different types of users;&lt;/li>
&lt;li>The report files (JSON, HTML), along with the page screenshot and HAR file are stored in S3 for future reference;&lt;/li>
&lt;li>The numbers (Lighthouse scores, assets file sizes, Web Vitals) are sent to a relational database (Postgres) and &lt;a href="https://prometheus.io/">Promotheus&lt;/a>, a monitoring system and time series database. Postgres empowers the creation of custom reports as we need and Prometheus is used with Grafana to create custom dashboards.&lt;/li>
&lt;/ul>
&lt;p>Comparing to open-source solutions, our tool is similar to &lt;a href="https://github.com/Verivox/lighthouse-monitor/">lighthouse-monitor&lt;/a>.&lt;/p>
&lt;h3 id="understanding-variability">Understanding variability&lt;/h3>
&lt;p>Running Lighthouse in our tool, we noticed the performance score changed due to inherent variability in web and network technologies, even when there hadn&amp;rsquo;t been a code change.&lt;/p>
&lt;p>Network, client hardware, and web server variabilities are some examples of how the score can trick you. &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/variability.md">Lighthouse documentation&lt;/a> clarifies all the different sources of variability and how to deal with them.&lt;/p>
&lt;p>In our case, we run Lighthouse 5 times per URL, calculating a median score. We also store the min/max values in case we want to investigate one-off results.&lt;/p>
&lt;h2 id="working-with-lighthouse-results">Working with Lighthouse results&lt;/h2>
&lt;p>What do I do when I have Lighthouse reports from 9 different URLs?&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/detective-wall.jpg" alt="Detective wall, from the Isle of Dogs movie">&lt;/p>
&lt;p>FCP, LCP, TTI, TBT, CLS: my work in the last few months is analyzing data and connecting dots. Sometimes I find low hanging fruit that improves one metric here and there, sometimes I go down the rabbit hole.&lt;/p>
&lt;p>With data coming from everywhere, I am following the scientific method to focus on what matters:&lt;/p>
&lt;ol>
&lt;li>Make an observation.&lt;/li>
&lt;li>Ask a question.&lt;/li>
&lt;li>Form a hypothesis or testable explanation.&lt;/li>
&lt;li>Make a prediction based on the hypothesis.&lt;/li>
&lt;li>Test the prediction.&lt;/li>
&lt;li>Iterate: use the results to make new hypotheses or predictions.&lt;/li>
&lt;/ol>
&lt;p>When it comes to performance, there is no silver bullet. Sometimes images are the culprits of bad performance scores, sometimes it is an architecture problem. The goal of my post is not blaming X or Y. In saying this, let me share a few thoughts on these two topics:&lt;/p>
&lt;h3 id="image-optimization">Image optimization&lt;/h3>
&lt;p>Images impact page load time since bigger images will take longer to be downloaded and as a result, it will impact different Lighthouse metrics - usually CLS, LCP.&lt;/p>
&lt;p>Recently, &lt;a href="https://github.com/vercel/next.js/discussions/16832">Google worked with Next.js&lt;/a> to create an &lt;a href="https://nextjs.org/docs/basic-features/image-optimization">Image component&lt;/a> that delivers optimized images. The framework supports image conversion from via Imgix, Cloudinary, Akamai and as expected, Vercel.&lt;/p>
&lt;p>I predict that the conversion on demand, by using third-party services as mentioned above or by using serverless solutions will become more and more popular. Starting next year, Google &lt;a href="https://developers.google.com/search/blog/2020/11/timing-for-page-experience">will include Web Vitals metrics&lt;/a> in the page ranking algorithms.&lt;/p>
&lt;h3 id="old-architectures-didnt-age-well">Old architectures didn&amp;rsquo;t age well&lt;/h3>
&lt;p>Old SPA architectures doesn&amp;rsquo;t perform well these days and Lighthouse captures that.&lt;/p>
&lt;p>Here is one example: back in the day, people (including myself) used to build their JS code into a single file. We wanted to avoid multiple files because HTTP/1.1 didn&amp;rsquo;t support too many concurrent requests, which was improved in HTTP/2. Today, unused JS will be caught in the Lighthouse tests.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/codesplitting.png" alt="Code splitting cartoon by Crystallize">&lt;/p>
&lt;p>Code Splitting is part of any modern JS tech stack using webpack and, in React, it can be combined with &lt;a href="https://loadable-components.com/docs/getting-started/">Loadable Components&lt;/a> and &lt;a href="https://reactjs.org/docs/code-splitting.html#reactlazy">&lt;code>React.lazy&lt;/code>&lt;/a>. Giving the user only what they need is key.&lt;/p>
&lt;p>In the back end, &lt;a href="https://graphql.org/">GraphQL&lt;/a> showed us that we can request data as we go. I know this can also be done with REST as long we know what is in the UI but the whole point here is to deliver only the data that users need.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>I hope this series shed some light (no pun intended) on your front-end performance skills. Lighthouse is so powerful that people out there are creating full SaaS products to make the web better.&lt;/p>
&lt;p>Are you using Lighthouse or planning to start using? Let me know in the comments!&lt;/p></description></item><item><title>Creating HAR files with Lighthouse</title><link>https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 04:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/</guid><description>&lt;p>HAR (HTTP Archive) is a JSON file containing all information about a browser’s interactions with a page. This file is often used for performance analysis. &lt;a href="https://hugo.leonardofaria.net/2020/06/07/using-har-files-to-analyze-performance-over-time/">Earlier this year&lt;/a>, I shared what kind of information we can get from and today we will automate the HAR creation.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/06/har-viewer.jpg" alt="HAR Viewer">&lt;/p>
&lt;p>There are different ways to automate the HAR creation: &lt;a href="https://www.npmjs.com/package/puppeteer-har">puppeteer-har&lt;/a> is a NPM package you can add in your tooling or if you are not from the JavaScript world you can use &lt;a href="https://octopus.com/blog/selenium/13-capturing-har-files/capturing-har-files">Selenium&lt;/a>.&lt;/p>
&lt;p>I was using puppeteer-har for a few months but then I noticed that the HAR was missing a few files in specific scenarios (ex. a React app with Loadable and React Router). For this reason, I decided to look for analternative and this is how I found the &lt;a href="https://www.npmjs.com/package/chrome-har-capturer">chrome-har-capturer&lt;/a> package.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>This package works like a charm; it creates a HAR file following the &lt;a href="http://www.softwareishard.com/blog/har-12-spec/">HAR 1.2 spec&lt;/a> and all that I need to provide is an array of raw events that comes from the &lt;a href="https://chromedevtools.github.io/devtools-protocol/">Chrome Debugging Protocol&lt;/a>. Who provides the raw events? Lighthouse!&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at the implementation (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> { fromLog } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-har-capturer&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> { writeFileSync } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port, emulatedFormFactor&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;desktop&amp;#39;&lt;/span>};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> url &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> { artifacts&lt;span style="color:#000;font-weight:bold">:&lt;/span> { devtoolsLogs&lt;span style="color:#000;font-weight:bold">:&lt;/span> { defaultPass } } } &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(url, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> har &lt;span style="color:#000;font-weight:bold">=&lt;/span> await fromLog(url, defaultPass);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> writeFileSync(&lt;span style="color:#d14">&amp;#39;page.har&amp;#39;&lt;/span>, JSON.stringify(har));
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>In my other posts, I shared how to use the &lt;code>lighthouse()&lt;/code> function to get all kinds of information: from web vitals metrics to page screenshots. What I didn&amp;rsquo;t mention was the function also keeps the artifacts created by the DevTools protocols. This is what we are storing in line 10 and this is the array of raw events that chrome-har-capturer needs to generate a HAR file.&lt;/p>
&lt;p>In line 12, we use the &lt;code>fromLog&lt;/code> function to build the HAR object, which we store in the file system in the following line. If you are curious about how the &lt;code>fromLog&lt;/code> function works, I would recommend reading the package source-code, in special &lt;a href="https://github.com/cyrus-and/chrome-har-capturer/blob/master/test/offline.js">one of their tests&lt;/a>.&lt;/p>
&lt;p>Next, the generated HAR is stored in &lt;code>page.har&lt;/code>. and we can use it in the &lt;a href="http://www.softwareishard.com/har/viewer/">HAR Viewer&lt;/a> for performance analysis.&lt;/p>
&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>We can extract a lot of valuable information from HAR files, such as:&lt;/p>
&lt;ul>
&lt;li>Protocols being used in the page (http 1.1, http 2, h3-29);&lt;/li>
&lt;li>Compressed/uncompressed asset sizes;&lt;/li>
&lt;li>Request timing information (ex.: waiting and downloading times);&lt;/li>
&lt;/ul>
&lt;p>With this information, we can identify bottlenecks (ex.what is the slowest request of that URL), find low-hanging fruit (ex.asset compression is one flag away in your build system tool) and prioritize tasks in order to improve performance on our pages.&lt;/p>
&lt;p>Can you think of different uses? Let me know in the comments!&lt;/p></description></item><item><title>Generating Web Vitals information with Lighthouse</title><link>https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 03:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/</guid><description>&lt;p>&lt;a href="https://webmasters.googleblog.com/2020/05/evaluating-page-experience.html">Earlier this year&lt;/a>, Google announced that “page experience” would impact its search ranking. A few weeks ago, they announced that the new page experience signals will roll out in May 2021. But what are these page experience signals?&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/search-page-experience.jpg" alt="Google&amp;rsquo;s Page experience chart">&lt;/p>
&lt;p>The &lt;a href="https://developers.google.com/search/docs/guides/page-experience">page experience&lt;/a> signal measures aspects of how users perceive the experience of interacting with a web page. Offering mobile-friendly pages and serving content over HTTPS is something we have been doing for a while but soon slow sites may lose their spot in the Google page ranking algorithm.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="what-are-core-web-vitals">What are Core Web Vitals&lt;/h2>
&lt;p>&lt;a href="https://web.dev/vitals/#core-web-vitals">From Google&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Core Web Vitals are the subset of Web Vitals that apply to all web pages, should be measured by all site owners, and will be surfaced across all Google tools. &lt;strong>Each of the Core Web Vitals represents a distinct facet of the user experience&lt;/strong>, is measurable in the field, and reflects the real-world experience of a critical user-centric outcome.&lt;/p>
&lt;/blockquote>
&lt;p>The three facets are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Loading&lt;/strong>: &lt;em>how fast is this page?&lt;/em> &lt;a href="https://web.dev/cls/">Largest Contentful Paint&lt;/a> measures perceived load speed and marks the point on the page load timeline when the page’s main content has likely loaded.&lt;/li>
&lt;li>&lt;strong>Interactivity&lt;/strong>: &lt;em>how fast does the page react to user input?&lt;/em> &lt;a href="https://web.dev/fid/">First Input Delay&lt;/a> measures responsiveness and quantifies the experience users feel when trying to first interact with the page.&lt;/li>
&lt;li>&lt;strong>Visual stability&lt;/strong>: &lt;em>does the page layout change while the page is loading?&lt;/em> &lt;a href="https://web.dev/cls/">Cumulative Layout Shift&lt;/a> measures visual stability and quantifies the amount of unexpected layout shift of visible page content.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/core-web-vitals.png" alt="Core Web Vitals">&lt;/p>
&lt;p>All of Google&amp;rsquo;s popular tools for developers support measurement of Core Web Vitals, including &lt;a href="https://github.com/GoogleChrome/lighthouse">Lighthouse&lt;/a>, &lt;a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights&lt;/a>, &lt;a href="https://developers.google.com/web/tools/chrome-devtools">Chrome DevTools&lt;/a>, &lt;a href="https://search.google.com/search-console/about">Search Console&lt;/a>, &lt;a href="https://hugo.leonardofaria.net/measure/">web.dev&amp;rsquo;s measure tool&lt;/a>, the &lt;a href="https://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma">Web Vitals Chrome extension&lt;/a> and the new &lt;a href="https://developers.google.com/web/tools/chrome-user-experience-report">Chrome UX Report&lt;/a> API.&lt;/p>
&lt;p>It is important to mention that FID can&amp;rsquo;t be measured in Lighthouse and as an alternative, Google recommends measuring the &lt;a href="https://web.dev/tbt/">Total Blocking Time (TBT)&lt;/a>. Tools like Lighthouse that load pages in a simulated environment without a user can not measure FID, since a simulated environment has no user input.&lt;/p>
&lt;h2 id="using-lighthouse-for-core-web-vitals-measurements">Using Lighthouse for Core Web Vitals measurements&lt;/h2>
&lt;p>The Web Vitals information is very easily found in the Lighthouse reports:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse-web-vitals-report.jpg" alt="Web Vitals information in Lighthouse report">&lt;/p>
&lt;p>What I want to share today is how to get Web Vitals information from the Lighthouse node package (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port, emulatedFormFactor&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;desktop&amp;#39;&lt;/span>};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> { lhr&lt;span style="color:#000;font-weight:bold">:&lt;/span> { audits } } &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> webVitals &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> largestContentfulPaint&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;largest-contentful-paint&amp;#39;&lt;/span>].numericValue,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span> cumulativeLayoutShift&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;cumulative-layout-shift&amp;#39;&lt;/span>].numericValue,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> totalBlockingTime&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;total-blocking-time&amp;#39;&lt;/span>].numericValue,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> largestContentfulPaintElement&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;largest-contentful-paint-element&amp;#39;&lt;/span>].details.items[&lt;span style="color:#099">0&lt;/span>].node.snippet,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> layoutShiftElements&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;layout-shift-elements&amp;#39;&lt;/span>].details.items.map(({ node }) =&amp;gt; node.snippet).toString(),
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span> };
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span> console.log(webVitals);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The information highlighted in the image above can be found in lines 9 - 14. The output of the script:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">{
largestContentfulPaint&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">3429.8639999999996&lt;/span>,
cumulativeLayoutShift&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">0.0002832719606426758&lt;/span>,
totalBlockingTime&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">0&lt;/span>,
largestContentfulPaintElement&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;lt;header id=&amp;#34;header&amp;#34; class=&amp;#34;header flex w-full m-0 bg-cover bg-top-center&amp;#34; style=&amp;#34;background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.55))…&amp;#34;&amp;gt;&amp;#39;&lt;/span>,
layoutShiftElements&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;lt;div id=&amp;#34;nav-menu&amp;#34; class=&amp;#34;absolute lg:p-6 hidden lg:block self-end text-white rounded-md bg-black sh…&amp;#34;&amp;gt;,&amp;lt;a href=&amp;#34;https://leonardofaria.net/&amp;#34; class=&amp;#34;tracking-tighter text-4xl font-semibold flex flex-shrink-0 text-center px-…&amp;#34;&amp;gt;&amp;#39;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For LCP, CLS and TBT, the output is not including a numeric unit, only the value. The goal here is to get a numeric value so we can manipulate data; for example, sorting or finding minimum / maximum values. If data manipulation is not the main goal, using the displayValue property instead of numericValue may work better. Example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">{
largestContentfulPaint&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;2.4 s&amp;#39;&lt;/span>,
cumulativeLayoutShift&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;0&amp;#39;&lt;/span>,
totalBlockingTime&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;30 ms&amp;#39;&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The two last properties of the webVitals object return strings containing HTML node. The intention of reporting these elements is to facilitate the identification of the villains of the page being tested.&lt;/p>
&lt;p>Bad Largest Contentful Paint metric can be caused for one or more of the following:&lt;/p>
&lt;ul>
&lt;li>Slow server response times;&lt;/li>
&lt;li>Render-blocking JavaScript and CSS;&lt;/li>
&lt;li>Slow resource load times;&lt;/li>
&lt;li>Client-side rendering.&lt;/li>
&lt;/ul>
&lt;p>In the example, the largest contentful paint element is a header with a hero image. This element contains an external background image and the image is the culprit causing the slow rendering? time.&lt;/p>
&lt;p>Bad Cumulative Layout Shift metrics can be caused for one or more of the following:&lt;/p>
&lt;ul>
&lt;li>Images without dimensions;&lt;/li>
&lt;li>Ads, embeds, iframes without dimensions;&lt;/li>
&lt;li>Dynamically injected content;&lt;/li>
&lt;li>Web fonts causing FOIT/Fout.&lt;/li>
&lt;/ul>
&lt;p>The page used in the example uses Google Fonts and there is a tiny layout shift when the font is loaded. The shift may be noticeable by users and it is reported in the layout shift elements property.&lt;/p>
&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>This script is useful in order to closely follow what is changing in the web vitals metrics of a page. In my case, I store the LCP, TBT and CLS numeric values in a database and use this information in a Gauge dashboard. I am not tracking the largest contentful paint element or layout shift elements yet.&lt;/p>
&lt;p>Can you think of different use cases? Let me know in the comments!&lt;/p></description></item><item><title>Generating screenshots with Lighthouse</title><link>https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 02:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/</guid><description>&lt;p>Lighthouse captures the rendering timeline of a page in 10 images. Do you need to store them? If yes, keep reading in order to learn how to store these images.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse-screenshots.jpg" alt="Lighthouse screenshots">&lt;/p>
&lt;p>The filmstrip above reveals how a page is rendered in a browser and gives us an opportunity to understand what is slow. For example, blank screenshots in the beginning is a sign that the &lt;a href="https://web.dev/fcp/">First Contentful Paint&lt;/a> is too slow.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>In this post you will learn where these images are stored and how to store them in a file system. Here is the script (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> { writeFileSync } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> { lhr&lt;span style="color:#000;font-weight:bold">:&lt;/span> { audits } } &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;screenshot-thumbnails&amp;#39;&lt;/span>].details.items
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span> .forEach(({ timing, data }) =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> &lt;span style="color:#000;font-weight:bold">debugger&lt;/span>;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> screenshot &lt;span style="color:#000;font-weight:bold">=&lt;/span> data.split(&lt;span style="color:#d14">&amp;#39;;base64,&amp;#39;&lt;/span>).pop();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> screenshotFile &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`screenshot-&lt;/span>&lt;span style="color:#d14">${&lt;/span>timing&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">ms.jpg`&lt;/span>;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span> writeFileSync(screenshotFile, screenshot, { encoding&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;base64&amp;#39;&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> finalScreenshotFile &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`screenshot-final.jpg`&lt;/span>;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> finalScreenshot &lt;span style="color:#000;font-weight:bold">=&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;final-screenshot&amp;#39;&lt;/span>].details.data.split(&lt;span style="color:#d14">&amp;#39;;base64,&amp;#39;&lt;/span>).pop();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span> writeFileSync(finalScreenshotFile, finalScreenshot, { encoding&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;base64&amp;#39;&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let’s dig into the magic. Starting in line 10, we loop in the screenshot-thumbnails audit the images captured by Lighthouse. Notice that images are encoded in the &lt;a href="https://en.wikipedia.org/wiki/Base64">Base64 format&lt;/a>, and along with their content, Lighthouse also stores when they happen.&lt;/p>
&lt;p>The script will create 11 image files as shown below.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse-screenshots-finder.jpg" alt="Screenshots created by Lighthouse">&lt;/p>
&lt;h3 id="desktop-dimensions">Desktop dimensions&lt;/h3>
&lt;p>By default, the device emulated in Lighthouse is a Moto G4, with a 5.5 inches screen (1920 x 1080). We can tweak that and emulate a Desktop by setting the &lt;code>emulatedFormFactor&lt;/code> to &lt;code>desktop&lt;/code>. The options variable will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port, emulatedFormFactor&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;desktop&amp;#39;&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>This script is useful in order to closely follow what is being rendered on a page or web app. In my particular case, I am storing only the final screenshot for future reference (ex. is this the right page?).&lt;/p>
&lt;p>Can you think of different uses? Let me know in the comments!&lt;/p></description></item><item><title>Getting asset transferred information with Lighthouse</title><link>https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 01:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/</guid><description>&lt;p>Have you ever about thought tracking what is added to a page or web app? Did not know how your website became 15MB? Sounds like it is time to track this data!&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/asset-transfered-by-type.jpg" alt="Chart showing assets transferred by type">&lt;/p>
&lt;p>&lt;a href="https://calibreapp.com/">Calibre&lt;/a>, one of my favourite web performance tools, creates charts, such as the one above, to illustrate what is being transferred to users when they visit your page or use your web app.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>In this post you will learn how to collect similar data using Lighthouse. Here is the recipe (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> runnerResult &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> assets &lt;span style="color:#000;font-weight:bold">=&lt;/span> {};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> runnerResult.lhr.audits[&lt;span style="color:#d14">&amp;#39;resource-summary&amp;#39;&lt;/span>].details.items
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span> .filter(({ transferSize }) =&amp;gt; transferSize &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#099">0&lt;/span>)
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> .forEach(({ resourceType, transferSize }) =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> assets[resourceType] &lt;span style="color:#000;font-weight:bold">=&lt;/span> transferSize;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span> console.log(assets);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The script is very straightforward: we import Lighthouse and Chrome Launcher (lines 1-2) and run the audit against the URL, storing its results in the &lt;code>runnerResult&lt;/code> variable.&lt;/p>
&lt;p>The &lt;code>runnerResult&lt;/code> variable stores 3 main objects:&lt;/p>
&lt;ul>
&lt;li>&lt;code>lhr&lt;/code>: Lighthouse Result Object contains run metadata (Lighthouse version, fetch time) and the audit results&lt;/li>
&lt;li>&lt;code>artifacts&lt;/code>: The data used by the audit&lt;/li>
&lt;li>&lt;code>report&lt;/code>: A JSON/HTML/CSV report&lt;/li>
&lt;/ul>
&lt;p>The magic starts happening in line 10: we dig into the results of the audits and get information from the resource summary audit (line 16). The output of the script is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">{
total&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">400584&lt;/span>,
image&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">321981&lt;/span>,
font&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">36954&lt;/span>,
script&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">27788&lt;/span>,
&lt;span style="color:#0086b3">document&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">7912&lt;/span>,
stylesheet&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">5274&lt;/span>,
other&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">675&lt;/span>,
&lt;span style="color:#d14">&amp;#39;third-party&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">66493&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If this is not enough information, and you also want to include the number of requests, you can just return the &lt;code>items&lt;/code> object and skip all filter and loop steps: &lt;code>runnerResult.lhr.audits['resource-summary'].details.items&lt;/code>.&lt;/p>
&lt;p>The image above shows what is inside the &lt;code>resource-summary&lt;/code> audit:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse-audit-object.jpg" alt="audit object">&lt;/p>
&lt;blockquote>
&lt;p>Curious to know how the JSON is shown in the image? This is how Firefox renders JSON files by default. I really wish other browsers implemented this by default.&lt;/p>
&lt;/blockquote>
&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>This script is useful in order to closely follow what is being sent to users. In my case, this data is stored daily and is used to identify if new features added in the codebase dramatically impact the page rendering.&lt;/p>
&lt;p>Can you think of different applications of this tool? Let me know in the comments!&lt;/p></description></item><item><title>The undocumented Lighthouse guide</title><link>https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide/</guid><description>&lt;p>Lighthouse is the go-to tool for improving the quality of web pages. Lately, I have been using Lighthouse a lot at &lt;a href="https://thinkific.com">work&lt;/a> to identify opportunities for performance optimizations. This post is part of a 6 part series that I have written about how to get the most out of Lighthouse.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse.jpg" alt="Lighthouse photo by Robert Wiedemann">&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Lighthouse Post Series&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="quick-lighthouse-intro">Quick Lighthouse intro&lt;/h2>
&lt;p>Lighthouse is an &lt;a href="https://github.com/GoogleChrome/lighthouse">open-source&lt;/a> automated tool for auditing the quality of web pages. This tool generates scores for performance, accessibility, progressive web apps, SEO, and best practices of a specific URL. Lighthouse also offers recommendations on how to improve the inefficient items of the audits.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse-report-leonardofaria-net.jpg" alt="Lighthouse report for leonardofaria.net">&lt;/p>
&lt;p>The recommendations offered by Lighthouse are invaluable in helping to clarify what can be done to improve the quality of a page or web app. Based on their recommendations, developers can inform Product Managers, as well as other stakeholders, and prioritize the most important/impactful tasks from there.&lt;/p>
&lt;p>There are different ways to run Lighthouse audits:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/speed/pagespeed/insights/">From a web UI&lt;/a>: Run Lighthouse via PageSpeed Insights&lt;/li>
&lt;li>&lt;a href="https://developers.google.com/web/tools/lighthouse#devtools">In Chrome DevTools&lt;/a>: Open the tab Audit in the Chrome DevTools - a quick way to audit pages behind authentication&lt;/li>
&lt;li>&lt;a href="https://developers.google.com/web/tools/lighthouse#cli">From the command line&lt;/a>: Install the &lt;code>lighthouse&lt;/code> CLI and start testing&lt;/li>
&lt;li>&lt;a href="https://github.com/GoogleChrome/lighthouse">As a Node module&lt;/a>: Add the &lt;code>lighthouse&lt;/code> module in Node scripts&lt;/li>
&lt;/ul>
&lt;p>This series of posts will cover the usage of Lighthouse as a Node module. At my workplsvr, I have created a JavaScript tool which runs every hour to programmatically audit 9 critical parts of our applications. The results are stored in a Postgres database and in Prometheus (a monitoring system &amp;amp; time-series database) so we can follow the reports over time.&lt;/p>
&lt;h2 id="the-lighthouse-node-package">The Lighthouse Node package&lt;/h2>
&lt;p>The Lighthouse docs present a &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/readme.md#using-programmatically">basic example of how to start our journey&lt;/a>. Please see below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> fs &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {logLevel&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;info&amp;#39;&lt;/span>, output&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;html&amp;#39;&lt;/span>, onlyCategories&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;performance&amp;#39;&lt;/span>], port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> runnerResult &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://example.com&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> &lt;span style="color:#998;font-style:italic">// `.report` is the HTML report as a string
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> reportHtml &lt;span style="color:#000;font-weight:bold">=&lt;/span> runnerResult.report;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> fs.writeFileSync(&lt;span style="color:#d14">&amp;#39;lhreport.html&amp;#39;&lt;/span>, reportHtml);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> &lt;span style="color:#998;font-style:italic">// `.lhr` is the Lighthouse Result as a JS object
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> console.log(&lt;span style="color:#d14">&amp;#39;Report is done for&amp;#39;&lt;/span>, runnerResult.lhr.finalUrl);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span> console.log(&lt;span style="color:#d14">&amp;#39;Performance score was&amp;#39;&lt;/span>, runnerResult.lhr.categories.performance.score &lt;span style="color:#000;font-weight:bold">*&lt;/span> &lt;span style="color:#099">100&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The first 3 lines import required packages: &lt;code>fs&lt;/code> for file system manipulation; &lt;code>lighthouse&lt;/code>, the main audit package; and &lt;code>chrome-launcher&lt;/code>, a package used for launching Chrome. Lighthouse needs to know which port has a Chrome instance running, so this audit can happen.&lt;/p>
&lt;p>Line 7 surfaces a few Lighthouse options, like &lt;code>logLevel&lt;/code> (&lt;code>silent | error | info |verbose&lt;/code>), &lt;code>output&lt;/code> (&lt;code>json | html | csv&lt;/code>) and &lt;code>onlyCategories&lt;/code> (an array filtering the tests you want to run). Their &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/888bd6dc9d927a734a8e20ea8a0248baa5b425ed/typings/externs.d.ts#L82-L119">type definitions file&lt;/a> showcase all the offered options.&lt;/p>
&lt;p>Next, the test is stored in the &lt;code>runnerResult&lt;/code> variable (line 8). The &lt;code>runnerResult&lt;/code> is an object that contains an HTML report, which is stored in the disk (lines 11-12). This result object is the main topic of my next few posts. There we will learn how to get relevant information from the audits.&lt;/p>
&lt;p>Afterwards, the terminal will show the tested URL and its performance score (lines 15-16) and lastly, the Chrome instance will be closed.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/11/lighthouse-example-com-report.jpg" alt="Lighthouse report">&lt;/p>
&lt;p>The HTML report is slightly different from the initial report of the post: only performance is audited as it was defined in the options.&lt;/p>
&lt;h2 id="conclusions-and-up-next">Conclusions and up next&lt;/h2>
&lt;p>This post covered what Lighthouse is, why to use it, and how to use it programmatically.&lt;/p>
&lt;p>The snippet from this blog post can be found in the &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>. From here you can check out different recipes in the &lt;a href="https://github.com/GoogleChrome/lighthouse#docs--recipes">Lighthouse docs&lt;/a> or keep reading the ones I have created:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hugo.leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&amp;ndash;&lt;/p>
&lt;p>Photo by &lt;a href="https://unsplash.com/@antilumen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText">Robert Wiedemann&lt;/a> on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText">Unsplash&lt;/a>&lt;/p></description></item><item><title>Automating accessibility tests with Cypress</title><link>https://hugo.leonardofaria.net/2020/08/13/automating-accessibility-tests-with-cypress/</link><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/08/13/automating-accessibility-tests-with-cypress/</guid><description>&lt;p>In my &lt;a href="https://leonardofaria.net/2020/08/03/adding-screenshot-testing-with-cypress-in-your-project/">previous post&lt;/a>, I covered how to add screenshot testing in Cypress to ensure components unintentionally change over time. Now, I will share how to automate accessibility tests with Cypress.&lt;/p>
&lt;h2 id="why-should-we-care-about-accessibility">Why should we care about accessibility?&lt;/h2>
&lt;p>Short answer: because it is the right thing to do.&lt;/p>
&lt;p>Long answer: an accessible web can help people with disabilities improve their lives. There are different kinds of disabilities, including auditory, cognitive, neurological, physical, speech and visual and our goal as product creators, engineers, designers is creating experiences that can include all people.&lt;/p>
&lt;p>It is also important to mention that web accessibility also benefits people &lt;em>without&lt;/em> disabilities, for example, someone changing abilities due to ageing or people with slow Internet connections or using devices with small screens. Last not least, disability can also be temporary, for example, someone with a broken arm can&amp;rsquo;t type and use a mouse at the same time.&lt;/p>
&lt;p>If you want to educate yourself about the topic, I can recommend the &lt;a href="https://www.w3.org/WAI/">W3C Web Accessibility Initiative (W3C WAI)&lt;/a> and &lt;a href="https://www.a11yproject.com/">The A11Y Project&lt;/a>.&lt;/p>
&lt;h2 id="accessibility-testing-techniques">Accessibility testing techniques&lt;/h2>
&lt;p>There are different ways to test if your website/app is accessible. The W3C WAI has a &lt;a href="https://www.w3.org/WAI/ER/tools/">list of 140+ tools&lt;/a> to help you determine if your website/app meets accessibility guidelines. You can also add in your strategy:&lt;/p>
&lt;ul>
&lt;li>Real users testing: companies like &lt;a href="https://www.makeitfable.com/">Fable&lt;/a> connect you and people with disabilities in research and user testing to meet your compliance goals.&lt;/li>
&lt;li>Browser extensions: &lt;a href="https://www.deque.com/axe/browser-extensions/">axe&lt;/a> is a recommended extension for Chrome, Firefox, Edge that help identify and resolve common accessibility issues.&lt;/li>
&lt;/ul>
&lt;p>The &lt;a href="https://github.com/dequelabs/axe-core">accessibility engine of axe is open-source&lt;/a> and it can be used in different ways, as this post will show.&lt;/p>
&lt;h2 id="before-we-start">Before we start&lt;/h2>
&lt;p>I created a &lt;a href="https://cypress-accessibility-example.vercel.app/">sample website&lt;/a> to mimic a Component Library. It is a very simple website created with Tailwind CSS and hosted in Vercel and it documents 2 components: &lt;a href="https://cypress-accessibility-example.vercel.app/badge.html">badge&lt;/a> and &lt;a href="https://cypress-accessibility-example.vercel.app/button.html">button&lt;/a>.&lt;/p>
&lt;p>You can check the &lt;a href="https://github.com/leonardofaria/cypress-accessibility-example">source code&lt;/a> in GitHub. The website is static and it is inside the &lt;code>public&lt;/code> folder. You can see the website locally by running &lt;code>npm run serve&lt;/code> and checking in the browser &lt;a href="http://localhost:8000">http://localhost:8000&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-sample-website.png" alt="Sample website">&lt;/p>
&lt;h2 id="adding-cypress-and-cypress-axe">Adding Cypress and cypress-axe&lt;/h2>
&lt;p>Start by cloning the &lt;a href="https://github.com/leonardofaria/cypress-example">example repository&lt;/a>. Next, create a new branch and install &lt;a href="https://www.npmjs.com/package/cypress-axe">cypress-axe&lt;/a>, the package responsible for tieing the axe engine to Cypress.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git checkout -b add-cypress
npm install -D cypress cypress-axe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create a &lt;code>cypress/support/index.js&lt;/code> file containing:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#d14">&amp;#39;cypress-axe&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This import will inject all the functions needed for tests.&lt;/p>
&lt;h2 id="creating-the-accessibility-test">Creating the accessibility test&lt;/h2>
&lt;p>Time to create the accessibility test. Here is the plan:&lt;/p>
&lt;ol>
&lt;li>Cypress will visit each page (badge and button) of the project.&lt;/li>
&lt;li>Cypress will test each example in the page. The &lt;a href="https://cypress-example.vercel.app/badge.html">Badge page&lt;/a> has 2 examples (Default and Pill), while the &lt;a href="https://cypress-example.vercel.app/badge.html">Button page&lt;/a> has 3 examples (Default, Pill and Outline). All these examples are inside an &lt;code>&amp;lt;div&amp;gt;&lt;/code> element with a &lt;code>cypress-wrapper&lt;/code>. This class was added with the only intention to identify what needs to be tested.&lt;/li>
&lt;/ol>
&lt;p>The first step is creating Cypress configuration file (&lt;code>cypress.json&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;baseUrl&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;http://localhost:8000/&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;video&amp;#34;&lt;/span>: &lt;span style="color:#000;font-weight:bold">false&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>baseUrl&lt;/code> is the website running locally. As I mentioned before, &lt;code>npm run serve&lt;/code> will serve the content of the &lt;code>public&lt;/code> folder. The second option, &lt;code>video&lt;/code> disables Cypress video recording, which won&amp;rsquo;t be used in the project.&lt;/p>
&lt;p>Time to create the test. In &lt;code>cypress/integration/accessibility.spec.js&lt;/code>, add:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> routes &lt;span style="color:#000;font-weight:bold">=&lt;/span> [&lt;span style="color:#d14">&amp;#39;badge.html&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;button.html&amp;#39;&lt;/span>];
describe(&lt;span style="color:#d14">&amp;#39;Component accessibility test&amp;#39;&lt;/span>, () =&amp;gt; {
routes.forEach((route) =&amp;gt; {
&lt;span style="color:#000;font-weight:bold">const&lt;/span> componentName &lt;span style="color:#000;font-weight:bold">=&lt;/span> route.replace(&lt;span style="color:#d14">&amp;#39;.html&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>);
&lt;span style="color:#000;font-weight:bold">const&lt;/span> testName &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`&lt;/span>&lt;span style="color:#d14">${&lt;/span>componentName&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14"> has no detectable accessibility violations on load`&lt;/span>;
it(testName, () =&amp;gt; {
cy.visit(route);
cy.injectAxe();
cy.get(&lt;span style="color:#d14">&amp;#39;.cypress-wrapper&amp;#39;&lt;/span>).each((element, index) =&amp;gt; {
cy.checkA11y(
&lt;span style="color:#d14">&amp;#39;.cypress-wrapper&amp;#39;&lt;/span>,
{
runOnly&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
type&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;tag&amp;#39;&lt;/span>,
values&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;wcag2a&amp;#39;&lt;/span>],
},
}
);
});
});
});
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the code above, I am creating dynamically tests based in the &lt;code>routes&lt;/code> array. The test will check each &lt;code>.cypress-wrapper&lt;/code> element against WCAG 2.0 Level A rules. There are different standards / purposes, as the table above shows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tag Name&lt;/th>
&lt;th>Accessibility Standard / Purpose&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>wcag2a&lt;/code>&lt;/td>
&lt;td>WCAG 2.0 Level A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>wcag2aa&lt;/code>&lt;/td>
&lt;td>WCAG 2.0 Level AA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>wcag21a&lt;/code>&lt;/td>
&lt;td>WCAG 2.1 Level A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>wcag21aa&lt;/code>&lt;/td>
&lt;td>WCAG 2.1 Level AA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>best-practice&lt;/code>&lt;/td>
&lt;td>Common accessibility best practices&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>wcag***&lt;/code>&lt;/td>
&lt;td>WCAG success criterion e.g. wcag111 maps to SC 1.1.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ACT&lt;/code>&lt;/td>
&lt;td>W3C approved Accessibility Conformance Testing rules&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>section508&lt;/code>&lt;/td>
&lt;td>Old Section 508 rules&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>section508.*.*&lt;/code>&lt;/td>
&lt;td>Requirement in old Section 508&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can find more information about it in the &lt;a href="https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#axe-core-tags">axe-core docs&lt;/a>.&lt;/p>
&lt;p>Last, let&amp;rsquo;s create inside the &lt;code>package.json&lt;/code> the command to trigger the tests:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;cypress&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here, there are 2 options: run Cypress in headless mode with &lt;code>npm run cypress run&lt;/code> or use the Cypress Test Runner with &lt;code>npm run cypress open&lt;/code>.&lt;/p>
&lt;h3 id="headless-option">Headless option&lt;/h3>
&lt;p>Using &lt;code>npm run test run&lt;/code>, the output should be similar to the next image:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-accessibility-first-test.jpg" alt="Output of first test">&lt;/p>
&lt;p>The tests will pass since the components have no accessibility issues.&lt;/p>
&lt;h3 id="test-runner-option">Test Runner option&lt;/h3>
&lt;p>Using &lt;code>npm run test open&lt;/code>, Cypress Test Runner will be opened and you can follow step by step the tests.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-accessibility-test-runner.jpg" alt="Cypress Test Runner screenshot">&lt;/p>
&lt;p>Our first milestone is done, let&amp;rsquo;s merge this branch to master. If you want to see the work done so far, jump in my &lt;a href="https://github.com/leonardofaria/cypress-accessility-example/pull/1/files">Pull Request&lt;/a>.&lt;/p>
&lt;h2 id="testing-in-real-life">Testing in real life&lt;/h2>
&lt;p>Imagine we are updating the website and we want to identify the buttons with ids. The &lt;code>id&lt;/code> property must be unique in the document, we can&amp;rsquo;t have 2 elements with the same one, however, we forgot about that and 3 buttons have the same id.&lt;/p>
&lt;p>Cypress will fail and the output will look something like this:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-accessibility-failed-test.jpg" alt="Output of failed test">&lt;/p>
&lt;p>Let&amp;rsquo;s improve the output of our tests by showing a table of found issues. First, let&amp;rsquo;s create a new branch:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git checkout -b improve-cypress-tests
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create the &lt;code>cypress/plugins/index.js&lt;/code> file with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">module.exports &lt;span style="color:#000;font-weight:bold">=&lt;/span> (on, config) =&amp;gt; {
on(&lt;span style="color:#d14">&amp;#39;task&amp;#39;&lt;/span>, {
log(message) {
console.log(message)
&lt;span style="color:#000;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">null&lt;/span>
},
table(message) {
console.table(message)
&lt;span style="color:#000;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">null&lt;/span>
}
})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will execute code in Node via the &lt;code>task&lt;/code> plugin event of Cypress. Next, let&amp;rsquo;s go back to the &lt;code>accessibility.spec.js&lt;/code> file and add the following function in the top of the file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> terminalLog &lt;span style="color:#000;font-weight:bold">=&lt;/span> (violations) =&amp;gt; {
cy.task(
&lt;span style="color:#d14">&amp;#39;log&amp;#39;&lt;/span>,
&lt;span style="color:#d14">`&lt;/span>&lt;span style="color:#d14">${&lt;/span>violations.length&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14"> accessibility violation&lt;/span>&lt;span style="color:#d14">${&lt;/span>
violations.length &lt;span style="color:#000;font-weight:bold">===&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#000;font-weight:bold">?&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;s&amp;#39;&lt;/span>
&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14"> &lt;/span>&lt;span style="color:#d14">${&lt;/span>violations.length &lt;span style="color:#000;font-weight:bold">===&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#000;font-weight:bold">?&lt;/span> &lt;span style="color:#d14">&amp;#39;was&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;were&amp;#39;&lt;/span>&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14"> detected`&lt;/span>
)
&lt;span style="color:#998;font-style:italic">// pluck specific keys to keep the table readable
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> violationData &lt;span style="color:#000;font-weight:bold">=&lt;/span> violations.map(
({ id, impact, description, nodes }) =&amp;gt; ({
id,
impact,
description,
nodes&lt;span style="color:#000;font-weight:bold">:&lt;/span> nodes.length
})
)
cy.task(&lt;span style="color:#d14">&amp;#39;table&amp;#39;&lt;/span>, violationData)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>violations&lt;/code> array contains all information about the failing elements. You can tweak this code to include, for instance, the element source code in the test output.&lt;/p>
&lt;p>Last, lets call the function inside the tests. Modify the &lt;code>checkA11y&lt;/code> function to:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">cy.checkA11y(
&lt;span style="color:#d14">&amp;#39;.cypress-wrapper&amp;#39;&lt;/span>,
{
runOnly&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
type&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;tag&amp;#39;&lt;/span>,
values&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;wcag2a&amp;#39;&lt;/span>],
},
},
terminalLog,
);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you run the test again, you&amp;rsquo;ll a table containing the issues reported by axe:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-accessibility-failed-test-table.jpg" alt="Output of failed test with a nice table">&lt;/p>
&lt;p>If you have any questions, please check the &lt;a href="https://github.com/leonardofaria/cypress-accessibility-example/pull/2/files">Pull request&lt;/a> in Github.&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>From here, you can continue your journey making products more accessible. As next steps, I would recommend:&lt;/p>
&lt;ul>
&lt;li>Adding these tests in your CI solution - I wrote about &lt;a href="https://hugo.leonardofaria.net/2020/08/03/adding-screenshot-testing-with-cypress-in-your-project/#adding-ci">integrating Cypress inside Semaphore&lt;/a> before;&lt;/li>
&lt;li>Finding the best way to customize the output of tests to improve troubleshooting issues;&lt;/li>
&lt;li>Learning more about how axe works.&lt;/li>
&lt;/ul>
&lt;p>I hope that you have learned that accessibility testing is not difficult and it doesn&amp;rsquo;t require much to start. Automation powered by axe can definitely help us to create better user experiences to all people.&lt;/p></description></item><item><title>Adding screenshot testing with Cypress in your project</title><link>https://hugo.leonardofaria.net/2020/08/03/adding-screenshot-testing-with-cypress-in-your-project/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/08/03/adding-screenshot-testing-with-cypress-in-your-project/</guid><description>&lt;p>Developers are usually concerned about the quality of their code. There are different kinds of tests to avoid breaking code when a new feature is added in a project, however, what can be done to ensure that components don&amp;rsquo;t look different over time?&lt;/p>
&lt;p>In this post, you will learn how to use Cypress to capture parts of pages of a website and after that, you will integrate the testing tool in CI to ensure that in the future no one will bring unwanted changes in the project.&lt;/p>
&lt;p>My motivation for creating this testing strategy came from work. At &lt;a href="https://www.thinkific.com">Thinkific&lt;/a> we have an internal Design System and we added Cypress to avoid surprises when working in CSS/JS files.&lt;/p>
&lt;p>By the end of this post we will have PRs with Cypress tests:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-bot-comment.jpg" alt="Cypress bot">&lt;/p>
&lt;h2 id="before-we-start">Before we start&lt;/h2>
&lt;p>I created a &lt;a href="https://cypress-example.vercel.app/">sample website&lt;/a> to mimic a Component Library. It is a very simple website created with TailwindCSS and hosted in Vercel and it documents 2 components: &lt;a href="https://cypress-example.vercel.app/badge.html">badge&lt;/a> and &lt;a href="https://cypress-example.vercel.app/button.html">button&lt;/a>.&lt;/p>
&lt;p>You can check the &lt;a href="https://github.com/leonardofaria/cypress-example">source code&lt;/a> in GitHub. The website is static and it is inside the &lt;code>public&lt;/code> folder. You can see the website locally by running &lt;code>npm run serve&lt;/code> and checking in the browser &lt;a href="http://localhost:8000">http://localhost:8000&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-sample-website.png" alt="Sample website">&lt;/p>
&lt;h2 id="adding-cypress-and-cypress-image-snapshot">Adding Cypress and Cypress Image Snapshot&lt;/h2>
&lt;p>Start by cloning the &lt;a href="https://github.com/leonardofaria/cypress-example">example repository&lt;/a>. Next, create a new branch and install &lt;a href="https://www.npmjs.com/package/cypress-image-snapshot">Cypress Image Snapshot&lt;/a>, the package responsible for capturing/comparing screenshots.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git checkout -b add-cypress
npm install -D cypress cypress-image-snapshot
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After adding the packages, a few extra steps are needed to add Cypress Image Snapshot in Cypress.&lt;/p>
&lt;p>Create a &lt;code>cypress/plugins/index.js&lt;/code> file with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> { addMatchImageSnapshotPlugin } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;cypress-image-snapshot/plugin&amp;#39;&lt;/span>);
module.exports &lt;span style="color:#000;font-weight:bold">=&lt;/span> (on, config) =&amp;gt; {
addMatchImageSnapshotPlugin(on, config);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create a &lt;code>cypress/support/index.js&lt;/code> file containing:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">import&lt;/span> { addMatchImageSnapshotCommand } from &lt;span style="color:#d14">&amp;#39;cypress-image-snapshot/command&amp;#39;&lt;/span>;
addMatchImageSnapshotCommand();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-the-screenshot-test">Creating the screenshot test&lt;/h2>
&lt;p>Time to create the screenshot test. Here is the plan:&lt;/p>
&lt;ol>
&lt;li>Cypress will visit each page (badge and button) of the project.&lt;/li>
&lt;li>Cypress will take a screenshot of each example in the page. The &lt;a href="https://cypress-example.vercel.app/badge.html">Badge page&lt;/a> has 2 examples (Default and Pill), while the &lt;a href="https://cypress-example.vercel.app/badge.html">Button page&lt;/a> has 3 examples (Default, Pill and Outline). All these examples are inside an &lt;code>&amp;lt;div&amp;gt;&lt;/code> element with a &lt;code>cypress-wrapper&lt;/code>. This class was added with the only intention to identify what needs to be tested.&lt;/li>
&lt;/ol>
&lt;p>The first step is creating Cypress configuration file (&lt;code>cypress.json&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;baseUrl&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;http://localhost:8000/&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;video&amp;#34;&lt;/span>: &lt;span style="color:#000;font-weight:bold">false&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>baseUrl&lt;/code> is the website running locally. As I mentioned before, &lt;code>npm run serve&lt;/code> will serve the content of the &lt;code>public&lt;/code> folder. The second option, &lt;code>video&lt;/code> disables Cypress video recording, which won&amp;rsquo;t be used in the project.&lt;/p>
&lt;p>Time to create the test. In &lt;code>cypress/integration/screenshot.spec.js&lt;/code>, add:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> routes &lt;span style="color:#000;font-weight:bold">=&lt;/span> [&lt;span style="color:#d14">&amp;#39;badge.html&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;button.html&amp;#39;&lt;/span>];
describe(&lt;span style="color:#d14">&amp;#39;Component screenshot&amp;#39;&lt;/span>, () =&amp;gt; {
routes.forEach((route) =&amp;gt; {
&lt;span style="color:#000;font-weight:bold">const&lt;/span> componentName &lt;span style="color:#000;font-weight:bold">=&lt;/span> route.replace(&lt;span style="color:#d14">&amp;#39;.html&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>);
&lt;span style="color:#000;font-weight:bold">const&lt;/span> testName &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`&lt;/span>&lt;span style="color:#d14">${&lt;/span>componentName&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14"> should match previous screenshot`&lt;/span>;
it(testName, () =&amp;gt; {
cy.visit(route);
cy.get(&lt;span style="color:#d14">&amp;#39;.cypress-wrapper&amp;#39;&lt;/span>).each((element, index) =&amp;gt; {
&lt;span style="color:#000;font-weight:bold">const&lt;/span> name &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`&lt;/span>&lt;span style="color:#d14">${&lt;/span>componentName&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">-&lt;/span>&lt;span style="color:#d14">${&lt;/span>index&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">`&lt;/span>;
cy.wrap(element).matchImageSnapshot(name);
});
});
});
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the code above, I am creating dynamically tests based in the &lt;code>routes&lt;/code> array. The test will create one image per &lt;code>.cypress-wrapper&lt;/code> element that the page has.&lt;/p>
&lt;p>Last, let&amp;rsquo;s create inside the &lt;code>package.json&lt;/code> the command to trigger the tests:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;cypress&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here, there are 2 options: run Cypress in headless mode with &lt;code>npm run cypress run&lt;/code> or use the Cypress Test Runner with &lt;code>npm run cypress open&lt;/code>.&lt;/p>
&lt;h3 id="headless-option">Headless option&lt;/h3>
&lt;p>Using &lt;code>npm run cypress run&lt;/code>, the output should be similar to the next image:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-first-test.jpg" alt="Output of first test">&lt;/p>
&lt;p>The tests will pass and 5 images will be created under &lt;code>/snapshots/screenshot.spec.js&lt;/code> folder.&lt;/p>
&lt;h3 id="test-runner-option">Test Runner option&lt;/h3>
&lt;p>Using &lt;code>npm run cypress open&lt;/code>, Cypress Test Runner will be opened and you can follow step by step the tests.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-test-runner.jpg" alt="Cypress Test Runner screenshot">&lt;/p>
&lt;p>Our first milestone is done, let&amp;rsquo;s merge this branch to master. If you want to see the work done so far, jump in my &lt;a href="https://github.com/leonardofaria/cypress-example/pull/1">Pull Request&lt;/a>.&lt;/p>
&lt;h2 id="using-cypress-inside-docker">Using Cypress inside Docker&lt;/h2>
&lt;p>If you run the test above alternating between headless and Test Runner, you may notice that screenshot will vary. Using the Test Runner with a retina display computer, you may get retina images (2x), while the headless mode doesn&amp;rsquo;t give you high-quality screenshots.&lt;/p>
&lt;p>Also, it is important to say the screenshots may vary according to the Operational System. Linux and Windows, for instance, have apps with visible scrollbars, while macOS hides the scrollbar. If the content captured in the screenshot doesn&amp;rsquo;t fit a component, you may or may not have a scrollbar. If your project relies on OS default fonts, screenshots will also be different according to the environment.&lt;/p>
&lt;p>In order to avoid these inconsistencies, tests will run inside Docker so the developer computer won&amp;rsquo;t affect in the screenshots captures.&lt;/p>
&lt;p>Let&amp;rsquo;s start by creating a new branch:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git checkout -b add-docker
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cypress offers different Docker images - you can check details in &lt;a href="https://docs.cypress.io/examples/examples/docker.html">their documentation&lt;/a> and &lt;a href="https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/">their blog&lt;/a>. For this example, I will use the &lt;code>cypress/included&lt;/code> image, which includes Electron and it is ready to be used.&lt;/p>
&lt;p>Two changes will be needed: change the &lt;code>baseUrl&lt;/code> in the &lt;code>cypress.json&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;baseUrl&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;http://host.docker.internal:8000/&amp;#34;&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the &lt;code>test&lt;/code> command in the &lt;code>package.json&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;docker run -it -e CYPRESS_updateSnapshots=$CYPRESS_updateSnapshots --ipc=host -v $PWD:/e2e -w /e2e cypress/included:4.11.0&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running &lt;code>npm run test&lt;/code> will bring us a problem:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-docker.jpg" alt="Output of test">&lt;/p>
&lt;p>The images are slightly different but why? Let&amp;rsquo;s see what is inside the &lt;code>__diff_output__&lt;/code> folder:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-button-diff.png" alt="Button&amp;rsquo;s difference">&lt;/p>
&lt;p>As I mentioned earlier, typography inconsistencies! The Button component uses the OS default font. Since Docker is running inside Linux, the rendered font won&amp;rsquo;t be the same that I have installed on macOS.&lt;/p>
&lt;p>Since now we moved to Docker, these screenshots are outdated. Time to update the snapshots:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#008080">CYPRESS_updateSnapshots&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#0086b3">true&lt;/span> npm run &lt;span style="color:#0086b3">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please notice that I am prefixing the test command with the environment variable &lt;code>CYPRESS_updateSnapshots&lt;/code>.&lt;/p>
&lt;p>The second milestone is done. In case you need help, check my &lt;a href="https://github.com/leonardofaria/cypress-example/pull/2">pull request&lt;/a>.&lt;/p>
&lt;p>Let&amp;rsquo;s merge this branch and move forward.&lt;/p>
&lt;h2 id="adding-ci">Adding CI&lt;/h2>
&lt;p>Our next step is adding the tests in CI. There are different CI solutions in the market but for this tutorial, I will use Semaphore. I am not affiliated to them and I use their product at work, so it was for me a natural choice. The configuration is straightforward and it can be adapted to other solutions like CircleCI or Github Actions.&lt;/p>
&lt;p>Before we create our Semaphore configuration file, let&amp;rsquo;s prepare our project to run in CI.&lt;/p>
&lt;p>The first step is installing &lt;a href="https://www.npmjs.com/package/start-server-and-test">start-server-and-test&lt;/a>. As the package name says, it will start a server, waits for URL, then runs a test command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm install -D start-server-and-test
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Second, edit the &lt;code>package.json&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;docker run -it -e CYPRESS_baseUrl=$CYPRESS_baseUrl -e CYPRESS_updateSnapshots=$CYPRESS_updateSnapshots --ipc=host -v $PWD:/e2e -w /e2e cypress/included:4.11.0&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;test:ci&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;start-server-and-test serve http://localhost:8000 test&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>test&lt;/code> script, we are adding the &lt;code>CYPRESS_baseUrl&lt;/code> environment variable. This will allow us to change the base URL used by Cypress dynamically. Also, we are adding the &lt;code>test:ci&lt;/code> script, which will run the package we just installed.&lt;/p>
&lt;p>We are ready for Semaphore. Create the &lt;code>.semaphore/semaphore.yml&lt;/code> file with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#099">.0&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Cypress&lt;span style="color:#bbb"> &lt;/span>example&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">agent&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">machine&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>e1-standard&lt;span style="color:#099">-2&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">os_image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>ubuntu1804&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">blocks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Build&lt;span style="color:#bbb"> &lt;/span>Dependencies&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">dependencies&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>[]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">task&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">jobs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>NPM&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">commands&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- sem-version&lt;span style="color:#bbb"> &lt;/span>node&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">12&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- checkout&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- npm&lt;span style="color:#bbb"> &lt;/span>install&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Tests&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">dependencies&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#d14">&amp;#39;Build Dependencies&amp;#39;&lt;/span>]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">task&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">prologue&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">commands&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- sem-version&lt;span style="color:#bbb"> &lt;/span>node&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">12&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- checkout&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">jobs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Cypress&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">commands&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- export&lt;span style="color:#bbb"> &lt;/span>CYPRESS_baseUrl=&lt;span style="color:#d14">&amp;#34;http://$(ip route | grep -E &amp;#39;(default|docker0)&amp;#39; | grep -Eo &amp;#39;([0-9]+\.){3}[0-9]+&amp;#39; | tail -1):8000&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- npm&lt;span style="color:#bbb"> &lt;/span>run&lt;span style="color:#bbb"> &lt;/span>test:ci&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Breaking the configuration in details:&lt;/p>
&lt;ul>
&lt;li>The lines 1-6 defines which kind of instance we will use in their environment;&lt;/li>
&lt;li>The lines 8 and 16 create 2 blocks: the first block, &amp;ldquo;Build Dependencies&amp;rdquo; will run &lt;code>npm install&lt;/code>, downloading the dependencies we need. The second block, &amp;ldquo;Tests&amp;rdquo; will run Cypress, with a few differences.&lt;/li>
&lt;li>In line 27, we are dynamically setting the &lt;code>CYPRESS_baseUrl&lt;/code> environment variable based in the IP Docker is using at the moment. This will replace &lt;code>http://host.docker.internal:8000/&lt;/code>, which may not work in all environments.&lt;/li>
&lt;li>In line 28, we finally run the test using &lt;code>start-server-and-test&lt;/code>: once the server is ready for connections, Cypress will run the test suite.&lt;/li>
&lt;/ul>
&lt;p>Another milestone is done, time to merge our branch! You can check the &lt;a href="https://github.com/leonardofaria/cypress-example/pull/6/files">Pull request&lt;/a> that contains all the files from this section and check the &lt;a href="https://leonardofaria.semaphoreci.com/workflows/061f6c9f-8f2d-4351-8a25-e5bc1568f67e">build inside Semaphore&lt;/a>.&lt;/p>
&lt;h2 id="recording-the-tests-in-cypressio">Recording the tests in cypress.io&lt;/h2>
&lt;p>Reading the output of tests in CI is not very friendly. In this step, we will integrate our project with &lt;a href="https://www.cypress.io/">cypress.io&lt;/a>.&lt;/p>
&lt;p>The following steps are based on &lt;a href="https://docs.cypress.io/guides/dashboard/projects.html#Setup">Cypress documentation&lt;/a>.&lt;/p>
&lt;p>Let&amp;rsquo;s start by getting a project ID and a record key. In the terminal, create a new branch and run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git checkout -b add-cypress-recording
&lt;span style="color:#008080">CYPRESS_baseUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>http://localhost:8000 ./node_modules/.bin/cypress open
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Earlier I have mentioned we would be using Cypress inside Docker but here we are opening Cypress locally since this is the only way to integrate with the website dashboard.&lt;/p>
&lt;p>Inside Cypress, let&amp;rsquo;s go the Runs tab, click in &amp;ldquo;Set up project to record&amp;rdquo;, choose a name and visibility. We will get a &lt;code>projectId&lt;/code> that is automatically added in the &lt;code>cypress.json&lt;/code> file and a private record key. Here is a video of the steps:&lt;/p>
&lt;video class="h-auto" controls loop autoplay="autoplay">
&lt;source src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-adding-integration.mp4" type="video/mp4">
&lt;/video>
&lt;p>In Semaphore, I added the record key as an environment variable called &lt;code>CYPRESS_recordKey&lt;/code>. Next let&amp;rsquo;s update our test script to use the variable:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;test:ci&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;start-server-and-test &amp;#39;serve&amp;#39; 8000 &amp;#39;npm run test -- run --record --key $CYPRESS_recordKey&amp;#39;&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That is pretty much all that needs to be done. In the &lt;a href="https://github.com/leonardofaria/cypress-example/pull/8">Pull request&lt;/a> we can see the cypress.io integration in the comments. There is even a deep link that takes us to their dashboard and shows all the screenshots. Check the video below:&lt;/p>
&lt;video class="h-auto" controls loop autoplay="autoplay">
&lt;source src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-io-test-dashboard.mp4" type="video/mp4">
&lt;/video>
&lt;p>Time to merge our work and that is the end of our integration.&lt;/p>
&lt;h2 id="testing-in-real-life">Testing in real life&lt;/h2>
&lt;p>Imagine we are working on a change that affects the padding of the buttons: time to test if Cypress will capture the difference.&lt;/p>
&lt;p>In the example website, let&amp;rsquo;s double the horizontal padding from 16px to 32px. This change is quite simple since we are using Tailwind CSS: &lt;code>px-4&lt;/code> gets replaced by &lt;code>px-8&lt;/code>. Here is &lt;a href="https://github.com/leonardofaria/cypress-example/pull/9">Pull request&lt;/a>.&lt;/p>
&lt;p>As we could expect, Cypress captured that the button doesn&amp;rsquo;t match the screenshots. Visiting the page, we can check the screenshot of the broken test:&lt;/p>
&lt;video class="h-auto" controls loop autoplay="autoplay">
&lt;source src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-io-broken-test.mp4" type="video/mp4">
&lt;/video>
&lt;p>The diff file shows the original screenshot on the left, the current result on the right and they are combined in the middle. We also have the option to download the image so we can see the issue better:&lt;/p>
&lt;div class="full-width">&lt;img alt="Button before and after" src="https://hugo.leonardofaria.net/wp-content/uploads/2020/08/cypress-io-broken-test.png" />&lt;/div>
&lt;p>If this is not an issue, update the screenshots:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#008080">CYPRESS_updateSnapshots&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#0086b3">true&lt;/span> npm run &lt;span style="color:#0086b3">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-end">The end&lt;/h2>
&lt;p>That&amp;rsquo;s it for today. I hope you have learned how Cypress can be useful to ensure no one is adding unexpected changes in a project.&lt;/p></description></item><item><title>Creating your own ESLint config package</title><link>https://hugo.leonardofaria.net/2020/06/16/creating-your-own-eslint-config-package/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://hugo.leonardofaria.net/2020/06/16/creating-your-own-eslint-config-package/</guid><description>&lt;p>ESLint is a powerful tool to enforce consistent coding conventions and ensure quality in your JavaScript codebase. Coding conventions are sometimes difficult to decide and having a tool to automate enforcement is great to avoid unnecessary discussions. Ensuring quality is also a welcoming feature: linters are excellent tools for catching bugs, such as those related to variable scope.&lt;/p>
&lt;p>ESLint is designed to be completely configurable, giving you the option of enabling/disabling each rule, or mixing the rules to match your needs. With this in mind, the JavaScript community and companies who use JavaScript can extend the original ESLint config. There are &lt;a href="https://www.npmjs.com/search?q=eslint-config">several examples&lt;/a> in the npm registry: &lt;a href="https://www.npmjs.com/package/eslint-config-airbnb">eslint-config-airbnb&lt;/a> is one of the most famous.&lt;/p>
&lt;p>In your daily basis, you will probably combine more than one config, since there is no one-config-fits-all. This post will show how to create your repository of configurations, giving you the option to centralize all your rule definitions.&lt;/p>
&lt;p>The first step is creating a new folder and creating an npm project. &lt;a href="https://eslint.org/docs/developer-guide/shareable-configs">By convention&lt;/a>, the module name begins with &lt;code>eslint-config-&lt;/code>, such as &lt;code>eslint-config-test&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir eslint-config-test
&lt;span style="color:#0086b3">cd&lt;/span> eslint-config-test
npm init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will have a package.json file that will look like the following snippet:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;eslint-config-test&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;index.js&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;span style="color:#000080">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;&lt;/span>
},
&lt;span style="color:#000080">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;license&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;ISC&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, time to add your ESLint dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm install -D eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-jsx eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks prettier
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The packages will change according to your needs. In this case, I work with React codebases and I use &lt;a href="https://prettier.io/">Prettier&lt;/a> to format my code. The &lt;a href="https://eslint.org/docs/developer-guide/shareable-configs#publishing-a-shareable-config">documentation&lt;/a> mentions that if your shareable config depends on a plugin, you should also specify it as a &lt;code>peerDependency&lt;/code>.&lt;/p>
&lt;p>Next, I will create a &lt;code>.eslintrc.js&lt;/code> with my configuration - this is similar to what you already do in your apps:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">module.exports &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#000;font-weight:bold">extends&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> [
&lt;span style="color:#d14">&amp;#39;airbnb&amp;#39;&lt;/span>,
&lt;span style="color:#d14">&amp;#39;eslint:recommended&amp;#39;&lt;/span>,
&lt;span style="color:#d14">&amp;#39;plugin:import/errors&amp;#39;&lt;/span>,
&lt;span style="color:#d14">&amp;#39;plugin:react/recommended&amp;#39;&lt;/span>,
&lt;span style="color:#d14">&amp;#39;plugin:jsx-a11y/recommended&amp;#39;&lt;/span>,
&lt;span style="color:#d14">&amp;#39;plugin:prettier/recommended&amp;#39;&lt;/span>,
&lt;span style="color:#d14">&amp;#39;prettier/react&amp;#39;&lt;/span>,
],
plugins&lt;span style="color:#000;font-weight:bold">:&lt;/span> [
&lt;span style="color:#d14">&amp;#39;react-hooks&amp;#39;&lt;/span>,
],
rules&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
},
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>rules&lt;/code> object stores any rule that you want to override. In the snippet above &lt;code>rules&lt;/code> is empty but feel free to check &lt;a href="https://github.com/leonardofaria/eslint-config-leozera/blob/master/.eslintrc.js#L14:L58">my overrides&lt;/a>. In the airbnb/javascript repository you can &lt;a href="https://github.com/airbnb/javascript/issues/1089">find a list of overridden rules&lt;/a> by the community.&lt;/p>
&lt;p>Time to create a &lt;code>.prettierrc&lt;/code> with your custom rules - this is a tricky part since Prettier and ESLint can conflict in a few rules:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;tabWidth&amp;#34;&lt;/span>: &lt;span style="color:#099">2&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is important to mention that the &lt;code>.prettierrc&lt;/code> file should live in the root of the project that is using your package. Right now, I am manually copying it. Next step is exporting your config in the &lt;code>index.js&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> eslintrc &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;./.eslintrc.js&amp;#39;&lt;/span>);
module.exports &lt;span style="color:#000;font-weight:bold">=&lt;/span> eslintrc;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is technically possible to create all configuration in the &lt;code>index.js&lt;/code> file however you wouldn&amp;rsquo;t get the config object linted (insert your &lt;a href="https://www.imdb.com/title/tt1375666/">Inception&lt;/a> joke here).&lt;/p>
&lt;p>&lt;em>Voilà!&lt;/em> That&amp;rsquo;s all you need to start your own package of configurations. You can test locally your config package by running, in a JavaScript project:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm install /Users/leonardo/path/to/eslint-config-test
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keep in mind that the dependencies of your configuration package may also be installed.&lt;/p>
&lt;p>If everything looks fine, you can publish to the npm registry:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm publish
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="full-example">Full example&lt;/h2>
&lt;p>I have a functional GitHub project showing the setup of this post: &lt;a href="https://github.com/leonardofaria/eslint-config-leozera">eslint-config-leozera&lt;/a>. You can also see it below:&lt;/p>
&lt;div class="full-width">
&lt;iframe
src="https://codesandbox.io/embed/github/leonardofaria/eslint-config-leozera/tree/master/?fontsize=14&amp;theme=dark"
style="width:100%; height:600px; border:0;overflow:hidden;"
title="leonardofaria/eslint-config-leozera"
allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
sandbox="allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
>&lt;/iframe>
&lt;/div>
&lt;h2 id="more-about-it">More about it&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eslint.org/docs/user-guide/configuring">Configuring ESLint&lt;/a>: official ESLint docs. You know, &lt;em>read the docs&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b">How to publish your first NPM package&lt;/a>: quoting the post subtitle&amp;rdquo;, everything you need to know to create a NPM package&amp;rdquo;&lt;/li>
&lt;li>&lt;a href="https://github.com/wesbos/eslint-config-wesbos">eslint-config-wesbos&lt;/a>: a project by &lt;a href="https://www.wesbos.com/">Wes Bos&lt;/a> that help me doing this work&lt;/li>
&lt;/ul></description></item><item><title>Changing node versions automatically per directory</title><link>https://hugo.leonardofaria.net/2020/05/20/changing-node-versions-automatically-per-directory/</link><pubDate>Wed, 20 May 2020 07:00:00 -0700</pubDate><guid>https://hugo.leonardofaria.net/2020/05/20/changing-node-versions-automatically-per-directory/</guid><description>&lt;p>Working in multiple Node projects sometimes means using different versions of Node. &lt;a href="https://github.com/nvm-sh/nvm">nvm&lt;/a> is one popular solution for Linux, macOS and Windows WSL that handles multiple Node installations. One of its most unknown tricks is the &lt;a href="https://github.com/nvm-sh/nvm#deeper-shell-integration">deeper shell integration&lt;/a>. Check the video:&lt;/p>
&lt;video class="h-auto" controls autoplay="autoplay">
&lt;source src="https://hugo.leonardofaria.net/wp-content/uploads/2020/05/nvm.mp4" type="video/mp4">
&lt;/video>
&lt;p>If you are using macOS Catalina, you are probably using ZSH as default shell. To make the magic happen, paste the following in &lt;code>~/.zshrc&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#998;font-style:italic"># place this after nvm initialization!&lt;/span>
autoload -U add-zsh-hook
load-nvmrc&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#0086b3">local&lt;/span> &lt;span style="color:#008080">node_version&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">$(&lt;/span>nvm version&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>
&lt;span style="color:#0086b3">local&lt;/span> &lt;span style="color:#008080">nvmrc_path&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">$(&lt;/span>nvm_find_nvmrc&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> -n &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#008080">$nvmrc_path&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>; &lt;span style="color:#000;font-weight:bold">then&lt;/span>
&lt;span style="color:#0086b3">local&lt;/span> &lt;span style="color:#008080">nvmrc_node_version&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">$(&lt;/span>nvm version &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">$(&lt;/span>cat &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#d14">${&lt;/span>&lt;span style="color:#008080">nvmrc_path&lt;/span>&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#008080">$nvmrc_node_version&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;N/A&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>; &lt;span style="color:#000;font-weight:bold">then&lt;/span>
nvm install
&lt;span style="color:#000;font-weight:bold">elif&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#008080">$nvmrc_node_version&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> !&lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#008080">$node_version&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>; &lt;span style="color:#000;font-weight:bold">then&lt;/span>
nvm use
&lt;span style="color:#000;font-weight:bold">fi&lt;/span>
&lt;span style="color:#000;font-weight:bold">elif&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#008080">$node_version&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> !&lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">$(&lt;/span>nvm version default&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>; &lt;span style="color:#000;font-weight:bold">then&lt;/span>
&lt;span style="color:#0086b3">echo&lt;/span> &lt;span style="color:#d14">&amp;#34;Reverting to nvm default version&amp;#34;&lt;/span>
nvm use default
&lt;span style="color:#000;font-weight:bold">fi&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
add-zsh-hook chpwd load-nvmrc
load-nvmrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After restarting your terminal, nvm will automatically change the version of Node based in the current folder.&lt;/p></description></item><item><title>Using Dependabot to keep your environment up to date</title><link>https://hugo.leonardofaria.net/2020/05/02/using-dependabot-to-keep-your-environment-up-to-date/</link><pubDate>Sat, 02 May 2020 11:41:56 -0300</pubDate><guid>https://hugo.leonardofaria.net/2020/05/02/using-dependabot-to-keep-your-environment-up-to-date/</guid><description>&lt;p>Adding dependencies in a project is seen as a good way to not reinvent the wheel but at the same time it can be concerning in many different aspects:&lt;/p>
&lt;ul>
&lt;li>Versioning: sometimes dependencies can require specific versions of other dependencies and this can cause hiccups in your app;&lt;/li>
&lt;li>Bundling: you need to be careful here to not bring extra code that will bloat your bundles;&lt;/li>
&lt;li>Updating: JavaScript moves fast and if you don&amp;rsquo;t update packages regularly, you&amp;rsquo;ll play Jenga in the future.&lt;/li>
&lt;/ul>
&lt;p>There are different tools to cover the update part like &lt;a href="https://dependencies.io">Dependencies.io&lt;/a>, &lt;a href="https://snyk.io/">Snyk&lt;/a> and &lt;a href="https://dependabot.com/">Dependabot&lt;/a>. Since I have been using Dependabot for a while, I decided to write about my experience.&lt;/p>
&lt;p>Dependabot is a tool acquired by GitHub one year ago that checks dependencies files from different languages (Ruby, JavaScript, Python, PHP, Elixir, to name a few) and finds new versions of libraries you are using in your project. Here is the setup:&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/05/dependabot.jpg" alt="Dependabot screenshot">&lt;/p>
&lt;p>Daily updates can be overwhelming and I think that weekly updates have a better cost/benefit. Also, I assign myself the Pull Requests so I can get notifications as soon they are opened.&lt;/p>
&lt;h2 id="how-to-use-dependabot-effectively">How to use Dependabot effectively&lt;/h2>
&lt;p>Dependabot includes in each PR release notes, changelogs, commits links and vulnerability details whenever available. This is useful because you can take a look at the information and decide to proceed or not.&lt;/p>
&lt;p>However, as pragmatic programmers, we want to ensure things won&amp;rsquo;t break. The PR details are important but more than that, we want a simulation of all (or almost all) deliverables that the project has.&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2020/05/semaphore.jpg" alt="CI Integration">&lt;/p>
&lt;p>This screenshot shows what happens every time a PR is opened in the components library codebase of my work.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tests (Jest / Bundle)&lt;/strong>: the Jest task will test the React components while the Bundle task will simulate the bundling commands we run when we want to update the package in the NPM registry;&lt;/li>
&lt;li>&lt;strong>Linters (Stylesheets / JavaScript)&lt;/strong>: the stylesheet files follow a custom sass-lint setup and the JS code follows a series of ESLint rules. If a PR introduces a new version of a linter with new rules we will be able to capture that;&lt;/li>
&lt;li>&lt;strong>Cypress (Screenshot Testing / Accessibility Testing)&lt;/strong>: if a new package introduces changes that may reflect in the look and feel of components, Cypress will capture the difference, screenshot it and store in S3. Since Cypress needs a live version of the documentation website, we also get the Gatsby build process covered.&lt;/li>
&lt;/ul>
&lt;p>With all these steps, it is very unlikely an external package will break our master branch. Kudos to my co-worker Grant Lee that also works in this project.&lt;/p></description></item><item><title>Exploring device detection for better user experiences in 2020</title><link>https://hugo.leonardofaria.net/2020/01/15/exploring-device-detection-for-better-user-experiences-in-2020/</link><pubDate>Wed, 15 Jan 2020 02:16:54 -0300</pubDate><guid>https://hugo.leonardofaria.net/2020/01/15/exploring-device-detection-for-better-user-experiences-in-2020/</guid><description>&lt;p>A few months ago I watched a great talk in Chrome Dev Summit about performance in slow devices.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/puUPpVrIRkc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>It blew my mind all the work done by Facebook in identifying devices to create a better user experience. Fast-forward to now, I decided to study a bit more the topic and see what I could do at Thinkific.&lt;/p>
&lt;h2 id="user-agents">User agents&lt;/h2>
&lt;p>User agents are well-known by developers. We use them to detect bots, redirect users to a specific version of our website or append CSS classes on our page so we can create different experiences.&lt;/p>
&lt;p>At Thinkific we already use the &lt;a href="https://github.com/fnando/browser">browser Ruby gem&lt;/a> to parse the user-agent and get relevant info (bot detection for instance). So, I decided to persist the main info in a visitor_device table – here is the schema:&lt;/p>
&lt;pre>&lt;code>tenant_id: the course creator school the visitor is checking
raw: the raw ua
type: desktop / mobile / tablet / bot / other
browser_name
browser_version
platform_name
platform_version
hardware: hstore containing memory, processor, device_model, device_name
connection: hstore containing downlink_max, connection_type
&lt;/code>&lt;/pre>&lt;p>You probably noticed that a few things there are not available in the UA string. Time for new JavaScript APIs:&lt;/p>
&lt;h2 id="getting-hardware-info-using-javascript">Getting hardware info using JavaScript&lt;/h2>
&lt;p>As covered in the Chrome Dev Summit video, we can use JS to get this info&lt;/p>
&lt;h3 id="memory">Memory&lt;/h3>
&lt;p>&lt;code>navigator.deviceMemory&lt;/code> will return a floating-point number. There are things to consider here:&lt;/p>
&lt;ul>
&lt;li>It only works over HTTPS&lt;/li>
&lt;li>Support is quite limited (Chrome only basically)&lt;/li>
&lt;/ul>
&lt;p>More about it:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/w3c/device-memory">Spec from W3C&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory">MDN Docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://caniuse.com/#feat=mdn-api_navigator_devicememory">Can I use deviceMemory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="processors">Processors&lt;/h3>
&lt;p>&lt;code>navigator.hardwareConcurrency&lt;/code> will return the number of logical cores of the user&amp;rsquo;s CPU. Support for this is &lt;a href="https://caniuse.com/#feat=hardwareconcurrency">decent&lt;/a>.&lt;/p>
&lt;h2 id="detecting-connection-info-using-javascript">Detecting connection info using JavaScript&lt;/h2>
&lt;p>&lt;code>navigator.connection&lt;/code> is a new API containing information about the system&amp;rsquo;s connection, such as the current bandwidth of the user&amp;rsquo;s device or whether the connection is metered. The support is quite limited (Chrome only basically) but things are promising.&lt;/p>
&lt;p>More about it:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://googlechrome.github.io/samples/network-information/">Chrome example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection">MDN Docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://caniuse.com/#feat=netinfo">Can I use Network Information API&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="detecting-the-device-model">Detecting the device model&lt;/h2>
&lt;p>The user agent &lt;em>may&lt;/em> return some information about the model name. &lt;a href="https://userstack.com/">userstack&lt;/a> is a service that gives you information based on the user agent. It works well and it is easy to integrate, however, depending on your need, they can&amp;rsquo;t help.&lt;/p>
&lt;p>Take for instance iDevices. Their user agent is basically the same so you can&amp;rsquo;t differentiate an iPad Pro from an old iPad that runs the last iOS. For these cases, you may need a better detection based on resolution, pixel density and other hardware information exposed in the browser. I did a quick research on this and found 3 products so far: &lt;a href="https://web.wurfl.io/#wurfl-js">WURFL.io&lt;/a>, &lt;a href="https://deviceatlas.com/products/web">DeviceAtlas&lt;/a> and &lt;a href="https://51degrees.com/">51Degrees&lt;/a>. I didn&amp;rsquo;t have time to try their products yet, but I am looking forward to doing it (and post about it)&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;p>&lt;em>Question: Why not using Google Analytics / Mixpanel / Kibana / New Relic / your tool here?&lt;/em>&lt;/p>
&lt;p>We could get browser info inside other tools however as a SaaS product we don&amp;rsquo;t use our own Google Analytics property (customers add their own). Also, adblockers may block these third-party tools. Last not least, by having this info in our side we can adapter better.&lt;/p>
&lt;p>&lt;em>Question: Do you have a list of low-end/high-end devices?&lt;/em>&lt;/p>
&lt;p>No. Maybe this can be built combining the number of processors and memory but I didn&amp;rsquo;t invest much time on this. In this project, my colleague created a Rails helper that would determinate if the user would use the lite or default version of a website based on hardware. On this topic, it is important to mention Facebook has a library for Android called &lt;a href="https://github.com/facebook/device-year-class/">Device Year Class&lt;/a>.&lt;/p></description></item><item><title>Creating a website for my Apple Collection</title><link>https://hugo.leonardofaria.net/2019/10/17/creating-a-website-for-my-apple-collection/</link><pubDate>Thu, 17 Oct 2019 00:36:30 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/10/17/creating-a-website-for-my-apple-collection/</guid><description>&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/10/collection.jpg" alt="Part of the collection">&lt;/p>
&lt;p>A while ago I started an Apple Collection. After a few laptops and a few iDevices, I decided that I should start collecting info about my iThings. In the beginning, I created a gist containing model, serial number, how did I get the device, minimum/maximum OS, etc.&lt;/p>
&lt;p>The list kept going bigger and bigger and the content started looking messy. The natural way to organize my data would be inside a SQL database, with the information distributed in columns. After organizing the information in tables, I would create a graphQL API (the one cool kids use these days) to give me the data needed to populate my UI – probably written in React, compiled with Babel and packed with webpack.&lt;/p>
&lt;p>Reading the previous paragraph aloud, you can hear many technologies and I even ignored the backend language and UI details like SASS or styled-components. It sounds a bit overwhelming when the ultimate goal is showing a list of items in a nice design.&lt;/p>
&lt;p>That&amp;rsquo;s being said, I thought: how can I deliver this content without:&lt;/p>
&lt;ul>
&lt;li>An API or any backend work&lt;/li>
&lt;li>Any JS framework/library&lt;/li>
&lt;li>Any JS tooling (webpack, babel, etc)&lt;/li>
&lt;li>Any CSS work&lt;/li>
&lt;/ul>
&lt;p>On top of these constraints, I had a few stretch goals:&lt;/p>
&lt;ul>
&lt;li>Create a website with good accessibility&lt;/li>
&lt;li>Create a website that works in old browsers, since I have computers running Mac OS 9.2 and iDevices running iOS 3&lt;/li>
&lt;/ul>
&lt;p>Challenge accepted. One index.html, a few vanilla JS files, no custom CSS. TL,DR:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bit.ly/collection-website">Final website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bit.ly/collection-source">Source code&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="no-api-or-any-backend-work">No API or any backend work&lt;/h2>
&lt;p>A while ago I saw a SaaS product called &lt;a href="https://steinhq.com/">Stein&lt;/a>. You create your data inside a Google Sheets document and they give you an endpoint with your data. Their library works like handlebars and it looks perfect for my use case:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">data-stein-url&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;https://api.steinhq.com/v1/storages/5cc158079ec99a2f484dcb40/Sheet1&amp;#34;&lt;/span> &lt;span style="color:#008080">data-stein-limit&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;2&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h6&lt;/span>&amp;gt;By {{author}}&amp;lt;/&lt;span style="color:#000080">h6&lt;/span>&amp;gt;
{{content}}
Read on &amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{link}}&amp;#34;&lt;/span>&amp;gt;Medium&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="no-js-frameworklibrary-and-tooling">No JS framework/library and tooling&lt;/h2>
&lt;p>Decided to avoid adding a framework or library in this project since the use case didn&amp;rsquo;t need one. All JS interactions on this page are quite simple (show/hide menus, open a modal screen, handle permalinks).&lt;/p>
&lt;p>Since I was not using a framework/library, I would avoid adding webpack and babel. No need to dig into presets and loaders.&lt;/p>
&lt;p>PS. You can argue that I&amp;rsquo;d have chosen create-react-app or Next.js and get all these problems solved, but no.&lt;/p>
&lt;h2 id="no-css-work">No CSS work&lt;/h2>
&lt;p>I love writing CSS, especially when I can use SASS but I decided to do not write CSS here. I had a few good reasons to avoid doing it:&lt;/p>
&lt;ul>
&lt;li>I had no designs and despite I could do something decent-looking, I didn&amp;rsquo;t want to put time and energy on it;&lt;/li>
&lt;li>I wanted to use &lt;a href="https://tailwindcss.com">Tailwind CSS&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>If you never heard about Tailwind CSS, please don&amp;rsquo;t try to think “it is a Bootstrap option”. Here is a good short explanation, from their website:&lt;/p>
&lt;blockquote class="wp-block-quote">
&lt;p>
Most CSS frameworks do too much.&lt;br />&amp;#8230;&lt;br />Instead of opinionated predesigned components, Tailwind provides low-level utility classes that let you build completely custom designs without ever leaving your HTML.
&lt;/p>
&lt;/blockquote>
&lt;p>This is pretty much true. A quick search gives you many web apps “rebuilt” with Tailwind CSS:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/whatsapp-web-clone">Whatsapp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/telegram-desktop-using-tailwindcss">Telegram&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/facebook-clone">Facebook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/reddit-clone">Reddit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/youtube-clone">Youtube&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/slack-clone-1">Slack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/coinbase-clone">Coinbase&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/github-profile-clone">Github&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/trello-panel-clone">Trello&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://codepen.io/drehimself/full/vpeVMx/">Twitter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=_JhTaENzfZQ">Netlify&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="create-a-website-with-good-accessibility">Create a website with good accessibility&lt;/h2>
&lt;p>Last month I started taking accessibility courses at &lt;a href="https://dequeuniversity.com/curriculum/packages/full">Deque University&lt;/a>. Their content is great and it reminders me that &lt;strong>HTML is accessible by default&lt;/strong>. By using a semantic HTML structure and testing basic things like keyboard navigation and colour contrast you eliminate several barries that move people with disabilities from your content. I am not an accessibility expert but here are a few accessibility-related things I&amp;rsquo;ve worked on this website:&lt;/p>
&lt;ul>
&lt;li>Disable stylesheets: by disabling stylesheets you can ensure that your content follows a logical/structural way.&lt;/li>
&lt;li>VoiceOver: VoiceOver is included in macOS and iOS. It is &lt;a href="https://webaim.org/articles/voiceover/">very simple to use it&lt;/a> and by using it you can have a better understanding of how people use this feature.&lt;/li>
&lt;li>Modals: modals can be problematic. Decided to follow &lt;a href="https://bitsofco.de/accessible-modal-dialog/">Ire Aderinokun&amp;rsquo;s&lt;/a> approach.&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd">axe&lt;/a>: the extension is an accessibility checker for WCAG 2 and Section 508 accessibility rules.&lt;/li>
&lt;/ul>
&lt;p>It is not perfect, there are a few things that I didn&amp;rsquo;t work it, like adding a skip link to the main content. If you are curious, &lt;a href="https://github.com/leonardofaria/collection/pull/1">here is the Pull Request with all the changes&lt;/a>.&lt;/p>
&lt;h2 id="create-a-website-that-works-in-old-browsers">Create a website that works in old browsers&lt;/h2>
&lt;p>I couldn&amp;rsquo;t achieve this objective since I had no control over scripts and styles. However, it doesn&amp;rsquo;t seem to be impossible. A few things I noticed:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SteinHQ/Expedite">Expedite&lt;/a> (Stein client) uses &lt;a href="https://github.com/SteinHQ/Expedite/blob/master/index.js#L51-L54">fetch&lt;/a>, which was only &lt;a href="https://caniuse.com/#feat=fetch">added in Safari 10&lt;/a>. The request to their server could be probably replaced for an XMLHttpRequest.&lt;/li>
&lt;li>Tailwind uses flexbox in many elements. Safari only started supporting Flexbox in iOS 7. Maybe I could write a few properties to their existing elements to achieve a decent look.&lt;/li>
&lt;li>SSL Certificates may be an issue to old browsers.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Making this website was super fun. The fact I added “constraints” to it made think outside the box. Out of curiosity, I tracked my time using &lt;a href="https://clockify.me">Clockify&lt;/a> and I&amp;rsquo;ve worked 13h on this, between coding, creating the data, testing and writing this post.&lt;/p></description></item><item><title>Forcing the usage of yarn (and at a specific version)</title><link>https://hugo.leonardofaria.net/2019/10/11/forcing-the-usage-of-yarn-and-at-a-specific-version/</link><pubDate>Fri, 11 Oct 2019 00:40:46 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/10/11/forcing-the-usage-of-yarn-and-at-a-specific-version/</guid><description>&lt;p>People and organizations often have preferences for a specific package manager. At work, we decided to use Yarn due to emoji support (jk) but how to keep everybody using Yarn? &lt;/p>
&lt;p>We can use the &lt;a href="https://docs.npmjs.com/misc/scripts">preinstall hook&lt;/a> to check if the user run &lt;code>npm install&lt;/code>or &lt;code>yarn install&lt;/code>. Here is one example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#d14">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
&lt;span style="color:#d14">&amp;#34;preinstall&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;node -e \&amp;#34;if(process.env.npm_execpath.indexOf(&amp;#39;yarn&amp;#39;) === -1) throw new Error(&amp;#39;You must use Yarn to install, not NPM&amp;#39;)\&amp;#34;&amp;#34;&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run &lt;code>npm install&lt;/code>:&lt;figure class="wp-block-image">&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/10/npm-install.jpg" alt="" class="wp-image-2084" /> &lt;/figure>&lt;/p>
&lt;p>If you want to ignore the checking (CI environment for instance), use the &lt;code>--ignore-scripts&lt;/code> option: &lt;/p>
&lt;p>&lt;code>npm install --ignore-scripts&lt;/code>&lt;/p>
&lt;p>Moreover, you can use the &lt;a href="https://docs.npmjs.com/files/package.json#engines">engines option&lt;/a> of NPM to force a specific version of Node, and/or Yarn. Here is an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#d14">&amp;#34;engines&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
&lt;span style="color:#d14">&amp;#34;yarn&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;1.19.1&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;node&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;12&amp;#34;&lt;/span>
},
&lt;/code>&lt;/pre>&lt;/div>&lt;figure class="wp-block-image">
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/10/npm-engines.jpg" alt="" class="wp-image-2101" /> &lt;/figure>&lt;/p></description></item><item><title>Disabling autofill in Chrome</title><link>https://hugo.leonardofaria.net/2019/10/02/disabling-autofill-in-chrome/</link><pubDate>Wed, 02 Oct 2019 16:58:52 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/10/02/disabling-autofill-in-chrome/</guid><description>&lt;p>Autofill in form elements is a very useful feature in browsers. Creating new accounts or shopping in an online store are examples of this feature saving us time.&lt;/p>
&lt;p>However, the autofill feature can be a problem for SaaS products. Imagine that you want to edit the email address of one of your users. You hit edit in one screen and once you get a form with your user data Chrome will replace their email to your email. This is not a good user experience.&lt;/p>
&lt;p>MDN has an article showing “How to turn off form autocompletion”. The solution is using the autocomplete attribute with an off value. This doesn&amp;rsquo;t work in Chrome.&lt;/p>
&lt;p>Digging in Stackoverflow and Google results, I found a &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=468153#c164">bug issued in 2015 about the topic&lt;/a>. Here is the TL,DR (from March 2016):&lt;/p>
&lt;blockquote>
&lt;p>First off, thanks for everyone&amp;rsquo;s feedback on this. I apologize for our delay in clarifying our stance. We&amp;rsquo;ve been working to finalize our policy regarding Autofill and the autocomplete attribute, and we&amp;rsquo;ve been making changes to this over the past few months (as some of you have noticed).&lt;/p>
&lt;p>First and foremost, Autofill in Chrome exists to help our everyday users get through common forms (address forms, contact forms, checkout forms, etc) across the web. This has become especially important on mobile devices, where typing on virtual keyboards is both difficult and annoying. Autofill tries to make this experience better, and it&amp;rsquo;s used millions of times per day by Chrome users.&lt;/p>
&lt;p>The tricky part here is that somewhere along the journey of the web autocomplete=off become a default for many form fields, without any real thought being given as to whether or not that was good for users. This doesn&amp;rsquo;t mean there aren&amp;rsquo;t very valid cases where you don&amp;rsquo;t want the browser autofilling data (e.g. on CRM systems), but by and large, we see those as the minority cases. And as a result, we started ignoring autocomplete=off for Chrome Autofill data [1].&lt;/p>
&lt;p>We don&amp;rsquo;t just ignore the autocomplete attribute, however. In the WHATWG standard, we defined a series of new autocomplete values that developers can use to better inform the browser about what a particular field is, and we encourage developers to use those types. [2]&lt;/p>
&lt;p>In cases where you really want to disable autofill, our suggestion at this point is to utilize the autocomplete attribute to give valid, semantic meaning to your fields. If we encounter an autocomplete attribute that we don&amp;rsquo;t recognize, we won&amp;rsquo;t try and fill it.&lt;/p>
&lt;p>As an example, if you have an address input field in your CRM tool that you don&amp;rsquo;t want Chrome to Autofill, you can give it semantic meaning that makes sense relative to what you&amp;rsquo;re asking for: e.g. autocomplete=”new-user-street-address”. If Chrome encounters that, it won&amp;rsquo;t try and autofill the field.&lt;/p>
&lt;/blockquote>
&lt;p>I also found a &lt;a href="https://gist.github.com/niksumeiko/360164708c3b326bd1c8">gist&lt;/a> with a few solutions. Many people reported using &lt;code>autocomplete=&amp;quot;new-password&amp;quot;&lt;/code> fixes this issue but I have no success on this front. Which solved the issue for me is setting the form fields to read only and then removing the attribute once the user focus them.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">input&lt;/span> &lt;span style="color:#008080">readonly&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;readonly&amp;#34;&lt;/span> &lt;span style="color:#008080">onfocus&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;this.removeAttribute(&amp;#39;readonly&amp;#39;);&amp;#34;&lt;/span> &lt;span style="color:#008080">type&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#008080">value&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;user@email.com&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Thoughts on building components libraries</title><link>https://hugo.leonardofaria.net/2018/02/04/thoughts-building-components-libraries/</link><pubDate>Sun, 04 Feb 2018 16:24:53 -0200</pubDate><guid>https://hugo.leonardofaria.net/2018/02/04/thoughts-building-components-libraries/</guid><description>&lt;p>A few months ago we started using React at &lt;a href="https://thinkific.com">Thinkific&lt;/a>. One of the challenges of using React is creating reusable components not only from a look and feel perspective but also shareable in different projects.&lt;/p>
&lt;p>I didn&amp;rsquo;t create this concept of elements (or components) library. To be honest, there are podcasts, courses, and examples everywhere about it but how to even start it? When you start creating a project from scratch you face several questions:&lt;/p>
&lt;ul>
&lt;li>How to style components? Sass? Stylus? styled-components?&lt;/li>
&lt;li>How to show the elements?&lt;/li>
&lt;li>How to build the library? Babel? Webpack?&lt;/li>
&lt;li>How to publish the library? To NPM or not NPM?&lt;/li>
&lt;li>How to use integrations and CI in your favour?&lt;/li>
&lt;/ul>
&lt;p>Lots of decisions and you may not know all the answers. Startup Life™ doesn&amp;rsquo;t let you do whatever you want – everything has a cost and a trade-off. Why am I talking all this story? Because I wanted to share my thoughts about it and I created a &lt;a href="https://github.com/leonardofaria/leozera-ui">&lt;strong>repository to document&lt;/strong>&lt;/a> what we are doing.&lt;/p>
&lt;h2 id="styling">Styling&lt;/h2>
&lt;p>&lt;a href="https://www.styled-components.com/">styled-components&lt;/a> changed the way we style things however many people still use Sass, especially when they come from Rails (our case for instance).&lt;/p>
&lt;p>If you have something already done in Sass there is no reason for migrating to styled-components. Also, if you keep everything in Sass you can still export your compiled styling easily – like a bootstrap.css.&lt;/p>
&lt;h2 id="showing-elements">Showing elements&lt;/h2>
&lt;p>&lt;a href="https://storybook.js.org/">Storybook&lt;/a> is probably the way to go when the topic is showing a component and its properties. My two cents about Storybook:&lt;/p>
&lt;ul>
&lt;li>They have a &lt;a href="https://now-examples-slackin-nqnzoygycp.now.sh/">really good Slack&lt;/a>, which is an endless source of knowledge.&lt;/li>
&lt;li>&lt;a href="https://storybook.js.org/addons/addon-gallery/">Addons&lt;/a> are pretty useful and it is worth spending a time testing them. &lt;a href="https://github.com/storybooks/storybook/tree/master/addons/knobs">Knobs&lt;/a>, for instance, lets you change props via browser. Quite handy.&lt;/li>
&lt;li>You can host your Storybook using Github Pages. It&amp;rsquo;s pretty straightforward and projects like &lt;a href="https://github.com/tschaub/gh-pages">gh-pages&lt;/a> or &lt;a href="https://github.com/enriquecaballero/branchsite">branchsite&lt;/a> get job done.&lt;/li>
&lt;li>You can also host your Storybook using &lt;a href="https://www.netlify.com/">Netlify&lt;/a>. To be honest, this is my favourite approach because you can build the master branch as official documentation and build all additional commits – and get them in &lt;a href="https://github.com/leonardofaria/leozera-ui/pull/1">Pull Requests&lt;/a>!&lt;br>
&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2017/12/netlify.png" alt="Netlify hook in PR">&lt;/li>
&lt;/ul>
&lt;h2 id="building-the-library">Building the library&lt;/h2>
&lt;p>There are a few different approaches here. I am using Babel to compile individually the ES6 component and webpack to build everything in one file.&lt;/p>
&lt;p>At the moment I write this post &lt;a href="https://medium.com/webpack/webpack-4-beta-try-it-today-6b1d27d7d7e2">webpack 4&lt;/a> is beta. The performance improvements are quite stunning.&lt;/p>
&lt;h2 id="publishing-the-library">Publishing the library&lt;/h2>
&lt;p>Again, there are different approaches to publish the library in NPM. For now, I have a `yarn run publish` command that will bump the version, build the library and publish the built `dist` directory.&lt;/p>
&lt;p>This approach is quite manual but packages like &lt;a href="https://github.com/sindresorhus/np">np&lt;/a>, &lt;a href="https://github.com/mgol/npm-bump">npm-bump&lt;/a> and &lt;a href="https://github.com/d4rkr00t/pmm">pmm&lt;/a> can help here. You can also use &lt;code>yarn version&lt;/code> – if you are a yarn person.&lt;/p>
&lt;h2 id="using-integrations">Using integrations&lt;/h2>
&lt;p>I added CircleCI in the repository since I used to use on daily basis. It runs tests created by jest and after it uploads to Codecov the code coverage. Both CircleCI and Codecov are free for open source projects. Of course you can use &lt;a href="https://travis-ci.org/">Travis CI&lt;/a>, and &lt;a href="https://coveralls.io/">Coveralls&lt;/a>, also free for open source projects.&lt;/p>
&lt;p>One project that I just figured out recently is the &lt;a href="https://nodesecurity.io/">Node Security Platform&lt;/a>. Its job is monitoring vulnerability threatens in your repository. Github also &lt;a href="https://help.github.com/articles/about-security-alerts-for-vulnerable-dependencies/">offers&lt;/a> the same.&lt;/p>
&lt;p>Talking about external dependencies, you may want to consider &lt;a href="https://greenkeeper.io/">Greenkeeper&lt;/a> or &lt;a href="https://www.dependencies.io/">dependencies.io&lt;/a>. They both monitor your package.json and create individuals Pull Requests to update packages in your repository. The other two options you have are: &lt;code>yarn outdated&lt;/code> or &lt;a href="https://www.npmjs.com/package/npm-check-updates">ncu&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://www.npmjs.com/package/npm-check-updates">&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2018/02/ncu.png" alt="ncu">&lt;/a>&lt;/p>
&lt;p>Last but not least, I like to add a npm script to update the authors file. Here I shoot:&lt;/p>
&lt;pre>&lt;code>git log --format='%aN &amp;lt;%aE&amp;gt;' | sort -u --ignore-case | grep -v 'users.noreply.github.com' &amp;gt; AUTHORS.txt &amp;amp;&amp;amp; git commit AUTHORS.txt -m 'Update AUTHORS' || true
&lt;/code>&lt;/pre>&lt;p>If you are curious about the &lt;code>git commit AUTHORS.txt -m 'Update AUTHORS' || true&lt;/code>. Not all the time we will modify the text file so I need the &lt;code>|| true&lt;/code> to ensure that the script continues to run even after git reports an error since there is no changes to commit.&lt;/p>
&lt;h2 id="extra-resources">Extra resources&lt;/h2>
&lt;p>I am adding here a few useful links about the topic:&lt;/p>
&lt;ul>
&lt;li>Podcast: &lt;a href="http://frontendhappyhour.com/episodes/top-shelf-style-guides/">Top Shelf Style Guides&lt;/a>: lots of thoughts and links here – this podcast is really good by the way&lt;/li>
&lt;li>Course: &lt;a href="https://www.pluralsight.com/courses/react-creating-reusable-components">Creating Reusable Components&lt;/a>&lt;/li>
&lt;li>(Mini)-Course: &lt;a href="https://egghead.io/courses/publish-javascript-packages-on-npm">Publish JavaScript packages on NPM&lt;/a> – because this mini-course I found &lt;a href="https://github.com/sindresorhus/np">np&lt;/a>, quoted before.&lt;/li>
&lt;li>Website: &lt;a href="http://styleguides.io/">Style Guide&lt;/a> – 496 Website Style Guides and counting…&lt;/li>
&lt;li>Inspiration: &lt;a href="https://ant.design/">Ant Design&lt;/a>&lt;/li>
&lt;li>Inspiration: &lt;a href="https://atlaskit.atlassian.com/">AtlasKit&lt;/a>&lt;/li>
&lt;li>Inspiration: &lt;a href="https://nikgraf.github.io/belle/">Belly&lt;/a>&lt;/li>
&lt;li>Inspiration: &lt;a href="http://grommet.io/">Grommet&lt;/a>&lt;/li>
&lt;li>Inspiration: &lt;a href="https://react.semantic-ui.com/">Semantic UI&lt;/a>&lt;/li>
&lt;li>Inspiration: &lt;a href="http://reactsymbols.com/">UI React Kit&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Thanks for my co-worker &lt;a href="https://github.com/akiokio">Akio&lt;/a> for helping on this (and &lt;a href="https://github.com/reactjs/reactjs.org/pull/338#issuecomment-346891946">showing Netlify on reactjs.org repository&lt;/a>) and my other folks from Thinkific.&lt;/p></description></item><item><title>iPhone e Rails</title><link>https://hugo.leonardofaria.net/2010/02/21/iphone-e-rails/</link><pubDate>Sun, 21 Feb 2010 23:36:13 -0300</pubDate><guid>https://hugo.leonardofaria.net/2010/02/21/iphone-e-rails/</guid><description>&lt;p>O desenvolvimento de web apps para iPhone requer alguns cuidados especiais. Em nossas aplicações significa pensar em um layout para o gadget. Uma forma rápida de definir o layout para iPhone é através do código abaixo:&lt;/p>
&lt;p>Para quem quer conhecer o desenvolvimento de web apps para iPhone, vale conhecer os projetos &lt;a href="http://www.jqtouch.com">jQTouch&lt;/a> e &lt;a href="http://iwebkit.net/">iWebKit&lt;/a>. O jQTouch é um plugin do jQuery com uma série de recursos de animação semelhantes ao do aparelho e possui inclusive a funcionalidade de &lt;a href="http://www.jqtouch.com/preview/demos/ext_location/">Geo Location&lt;/a>. Já o iWebKit é um framework que não depende de nenhuma biblioteca e que possui também bons recursos para montagem de interfaces.&lt;/p></description></item><item><title>jQuery no Spotlight</title><link>https://hugo.leonardofaria.net/2009/05/25/jquery-no-spotlight/</link><pubDate>Mon, 25 May 2009 00:21:40 -0300</pubDate><guid>https://hugo.leonardofaria.net/2009/05/25/jquery-no-spotlight/</guid><description>&lt;p>&lt;a href="https://leonardofaria.net/2009/02/08/documentacao-do-rails-e-ruby-no-spotlight/">Anteriormente&lt;/a> eu postei sobre como integrar a documentação do Ruby e do Rails no dicionário do Mac OS, que automaticamente é indexado pelo Spotlight.&lt;/p>
&lt;center>
&lt;a href="http://www.appelsiini.net/2009/2/search-jquery-api-docs-from-spotlight">&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2009/05/jquery_spotlight.png" alt="jquery_spotlight" title="jquery no spotlight" />&lt;/a>
&lt;/center>
&lt;p>A dica de hoje é &lt;a href="http://www.appelsiini.net/download/jQuery.dictionary.zip">copiar o ‘dicionário&amp;rsquo;&lt;/a> do &lt;a href="http://www.jquery.com">jQuery&lt;/a> para a pasta de dicionários do seu usuário (&lt;code>~/Library/Dictionaries&lt;/code>) e curtir a documentação do jQuery dentro do Spotlight.&lt;/p>
&lt;p>PS.: existe também um &lt;a href="http://api.jquery.com/update/jquery-api-browser-2.0.air">aplicativo AIR&lt;/a> com a API do jQuery.&lt;br>
PS 2.: &lt;a href="http://jplanet.tumblr.com/">jPlanet&lt;/a> é um agregador de conteúdo sobre jQuery. Assine o feed!&lt;/p></description></item><item><title>Bookmarklet para ver propriedades dos elementos de uma página</title><link>https://hugo.leonardofaria.net/2007/08/05/bookmarklet-para-ver-propriedades-dos-elementos-de-uma-pagina/</link><pubDate>Sun, 05 Aug 2007 22:47:54 -0300</pubDate><guid>https://hugo.leonardofaria.net/2007/08/05/bookmarklet-para-ver-propriedades-dos-elementos-de-uma-pagina/</guid><description>&lt;p>O &lt;a href="http://westciv.com/xray/">XRAY&lt;/a> é um bookmarklet para Safari e família Mozilla que mostra as características de determinado elemento de uma página. Para quem usa Firefox, o XRAY lembra a função Inspect da extension Firebug. Recomendado!&lt;/p>
&lt;p>P.S.: do &lt;a href="http://westciv.com/">mesmo desenvolvedor&lt;/a> do XRAY vem um &lt;a href="http://westciv.com/style_master/academy/css_tutorial/index.html">guia bacaníssimo sobre CSS&lt;/a>.&lt;/p></description></item><item><title>Novas janelas em Javascript não-obstrusivo</title><link>https://hugo.leonardofaria.net/2007/06/23/novas-janelas-em-javascript-nao-obstrusivo/</link><pubDate>Sat, 23 Jun 2007 00:49:44 -0300</pubDate><guid>https://hugo.leonardofaria.net/2007/06/23/novas-janelas-em-javascript-nao-obstrusivo/</guid><description>&lt;p>A newsletter dessa semana do &lt;a href="http://www.sitepoint.com/">SitePoint&lt;/a> mostrou uma forma bem interessante de abrir novas janelas com javascript não-obstrusivo e validando XHTML Strict (para quem não sabe, o atributo ‘target&amp;rsquo; da tag ‘a&amp;rsquo; não passa na validação).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;http://example.com/&amp;#34;&lt;/span> &lt;span style="color:#008080">onclick&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;
&lt;/span>&lt;span style="color:#d14"> if (confirm(&amp;#39;Open this link in a new window?&amp;#39;)) {
&lt;/span>&lt;span style="color:#d14"> open(&amp;#39;http://example.com/&amp;#39;);
&lt;/span>&lt;span style="color:#d14"> return false;
&lt;/span>&lt;span style="color:#d14"> }
&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>&amp;gt;external link&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Basicamente, emprega-se o uso de uma caixa de diálogo. Bem simples. Uma alternativa mais sofisticada é criar uma função e ativá-la através do uso de uma classe. Veja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;http://example.com/&amp;#34;&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;ext&amp;#34;&lt;/span>&amp;gt;external link&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">script&lt;/span> &lt;span style="color:#008080">type&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#000;font-weight:bold">var&lt;/span> links &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0086b3">document&lt;/span>.getElementsByTagName(&lt;span style="color:#d14">&amp;#34;a&amp;#34;&lt;/span>);
&lt;span style="color:#000;font-weight:bold">for&lt;/span> (&lt;span style="color:#000;font-weight:bold">var&lt;/span> i &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>; i &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> links.length; i&lt;span style="color:#000;font-weight:bold">++&lt;/span>) {
&lt;span style="color:#000;font-weight:bold">var&lt;/span> link &lt;span style="color:#000;font-weight:bold">=&lt;/span> links[i];
&lt;span style="color:#000;font-weight:bold">if&lt;/span> (link.className &lt;span style="color:#000;font-weight:bold">==&lt;/span> &lt;span style="color:#d14">&amp;#34;ext&amp;#34;&lt;/span>) {
link.onclick &lt;span style="color:#000;font-weight:bold">=&lt;/span> clickHandler;
}
}
&lt;span style="color:#000;font-weight:bold">function&lt;/span> clickHandler() {
&lt;span style="color:#000;font-weight:bold">if&lt;/span> (confirm(&lt;span style="color:#d14">&amp;#34;Open this link in a new window?&amp;#34;&lt;/span>)) {
open(&lt;span style="color:#000;font-weight:bold">this&lt;/span>.href);
&lt;span style="color:#000;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">false&lt;/span>;
}
}
&amp;lt;/&lt;span style="color:#000080">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>12 efeitos bacanas com script.aculo.us</title><link>https://hugo.leonardofaria.net/2006/11/13/12-motivos-para-usar-scriptaculous/</link><pubDate>Mon, 13 Nov 2006 17:17:22 -0200</pubDate><guid>https://hugo.leonardofaria.net/2006/11/13/12-motivos-para-usar-scriptaculous/</guid><description>&lt;p>Criar efeitos visuais em Javascript era algo bem complexo. Muitos efeitos da lista que cito abaixo era algo somente imaginável para criar, para mim, no Flash. Entretanto, as coisas mudaram. O &lt;a href="http://script.aculo.us/">script.aculo.us&lt;/a> é uma biblioteca que permite a criação de efeitos de forma super-simples, sem requerer conhecimentos jedi em JS. Vamos a lista então:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://pragmaticobjects.org/index.php?itemid=7">Image Gallery&lt;/a> – Efeitos suaves e bem feitos&lt;/li>
&lt;li>&lt;a href="http://mir.aculo.us/stuff/reflector/reflector.html">Reflector&lt;/a> – Imagens com reflexos (muito usado no site da Apple)&lt;/li>
&lt;li>&lt;a href="http://www.bartelme.at/journal/archive/accessible_javascript_newsticker">Newsticker&lt;/a> – Newsticker não-obstrusivo&lt;/li>
&lt;li>&lt;a href="http://www.ajaxcf.com/blog/index.cfm/2006/2/28/Building-a-Local-AutoCompleter">Auto-Completer&lt;/a> – Estilo Google Suggest&lt;/li>
&lt;li>&lt;a href="http://wiki.script.aculo.us/scriptaculous/show/Autocompleter.Local">Auto-Completer&lt;/a> – Demo do wiki do script.aculo.us&lt;/li>
&lt;/ol>
&lt;ol start="6">
&lt;li>&lt;a href="http://blog.remvee.net/post/17">Slideshow&lt;/a>&lt;/li>
&lt;li>Outro &lt;a href="http://www.bigbold.com/snippets/posts/show/1068">Slideshow&lt;/a>&lt;/li>
&lt;li>Outro &lt;a href="http://mikeomatic.net/?p=78">Newsticker&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.innerewut.de/articles/2006/10/19/a-prototype-based-javascript-tooltip">Tooltip&lt;/a>&lt;/li>
&lt;li>Efeito &lt;a href="http://prototype-carousel.xilinus.com/">Carousel&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ajaxlessons.com/2006/02/19/ajax-workshop-3-shopping-cart-using-scriptaculous">Shopping car&lt;/a> – Nada que se compara a loja virtual da &lt;a href="http://panic.com/goods/">Panic&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.glanzani.com.ar/select/">Select box replacement&lt;/a> – Vindo dos hermanos&lt;/li>
&lt;/ol>
&lt;p>[tags]script.aculo.us, frameworks, prototype, web2.0, javascript[/tags]&lt;/p></description></item><item><title>Bookmarklets</title><link>https://hugo.leonardofaria.net/2006/06/08/bookmarklets/</link><pubDate>Thu, 08 Jun 2006 14:55:37 -0300</pubDate><guid>https://hugo.leonardofaria.net/2006/06/08/bookmarklets/</guid><description>&lt;p>&lt;a href="https://hugo.leonardofaria.net/wp-content/uploads/2006/06/flickr.jpg">&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2006/06/flickr.jpg" alt="Revista Webdesign" width="250" align="right" />&lt;/a>Há pelo menos 2 anos, falei dos bookmarklets, Javascripts que modificam o comportamento do navegador. Talvez eles seriam o avó do Greasemonkey, que prometem algo semelhante, mais com uma maior riqueza e poder.&lt;/p>
&lt;p>Nas versões anteriores do site, sempre divulgava vários desses Javascripts. Na transição de versão do site, havia me esquecido deles. Mais agora, &lt;a href="https://hugo.leonardofaria.net/wp-content/uploads/2006/06/bookmarklets.html">separei&lt;/a> a documentação.&lt;/p>
&lt;p>P.S.: Na &lt;a href="http://www.arteccom.com.br/webdesign">Revista Webdesign&lt;/a> de março desse ano há uma interessante reportagem sobre esses recursos, onde inclusive aparece meu nome.&lt;/p></description></item><item><title>Greasemonkey para orkut na Faculdade</title><link>https://hugo.leonardofaria.net/2006/06/01/greasemonkey-para-orkut-na-faculdade/</link><pubDate>Thu, 01 Jun 2006 15:00:32 -0300</pubDate><guid>https://hugo.leonardofaria.net/2006/06/01/greasemonkey-para-orkut-na-faculdade/</guid><description>&lt;p>O sysadmin lá da &lt;a href="http://www.fadom.br">faculdade&lt;/a> barrou, no servidor, o acesso à &lt;a href="http://www.orkut.com">http://www.orkut.com&lt;/a>. Coitado, ele esqueceu da URL &lt;a href="https://www.orkut.com">https://www.orkut.com&lt;/a>, via SSL.&lt;/p>
&lt;p>Aproveitando a deixa, escrevi um pequeno &lt;a href="http://greasemonkey.mozdev.org/">Greasemonkey&lt;/a>, que converte todos os links encontrados na página do orkut para o mesmos respectivos links, só que com o S, do https. Parece tosco, né? E é.&lt;/p>
&lt;p>&lt;a id="p46" rel="attachment" href="https://leonardofaria.net/2006/06/01/greasemonkey-para-orkut-na-faculdade/orkutuserjs/" title="orkut.user.js">orkut.user.js&lt;/a>&lt;/p></description></item></channel></rss>