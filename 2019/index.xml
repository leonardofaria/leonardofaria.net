<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019s on Leonardo Faria</title><link>https://hugo.leonardofaria.net/2019/</link><description>Recent content in 2019s on Leonardo Faria</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2019 01:40:07 -0300</lastBuildDate><atom:link href="https://hugo.leonardofaria.net/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple Sinatra Auth</title><link>https://hugo.leonardofaria.net/2019/11/04/a-simple-sinatra-auth/</link><pubDate>Mon, 04 Nov 2019 01:40:07 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/11/04/a-simple-sinatra-auth/</guid><description>&lt;p>Imagine you want to protect the content of a website created with Next.js, Hugo or your favourite static site generator. Github doesn&amp;rsquo;t offer this feature or Netlify offers authentication only in their paid plans. &lt;a href="https://bit.ly/sinatra-auth">Decided to create something simple with Sinatra, TailwindCSS and ready to go in Heroku&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://bit.ly/sinatra-auth">&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/11/sinatra-auth.jpg" alt="Sinatra Auth screenshot">&lt;/a>&lt;/figure>&lt;/p></description></item><item><title>Creating a website for my Apple Collection</title><link>https://hugo.leonardofaria.net/2019/10/17/creating-a-website-for-my-apple-collection/</link><pubDate>Thu, 17 Oct 2019 00:36:30 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/10/17/creating-a-website-for-my-apple-collection/</guid><description>&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/10/collection.jpg" alt="Part of the collection">&lt;/p>
&lt;p>A while ago I started an Apple Collection. After a few laptops and a few iDevices, I decided that I should start collecting info about my iThings. In the beginning, I created a gist containing model, serial number, how did I get the device, minimum/maximum OS, etc.&lt;/p>
&lt;p>The list kept going bigger and bigger and the content started looking messy. The natural way to organize my data would be inside a SQL database, with the information distributed in columns. After organizing the information in tables, I would create a graphQL API (the one cool kids use these days) to give me the data needed to populate my UI – probably written in React, compiled with Babel and packed with webpack.&lt;/p>
&lt;p>Reading the previous paragraph aloud, you can hear many technologies and I even ignored the backend language and UI details like SASS or styled-components. It sounds a bit overwhelming when the ultimate goal is showing a list of items in a nice design.&lt;/p>
&lt;p>That&amp;rsquo;s being said, I thought: how can I deliver this content without:&lt;/p>
&lt;ul>
&lt;li>An API or any backend work&lt;/li>
&lt;li>Any JS framework/library&lt;/li>
&lt;li>Any JS tooling (webpack, babel, etc)&lt;/li>
&lt;li>Any CSS work&lt;/li>
&lt;/ul>
&lt;p>On top of these constraints, I had a few stretch goals:&lt;/p>
&lt;ul>
&lt;li>Create a website with good accessibility&lt;/li>
&lt;li>Create a website that works in old browsers, since I have computers running Mac OS 9.2 and iDevices running iOS 3&lt;/li>
&lt;/ul>
&lt;p>Challenge accepted. One index.html, a few vanilla JS files, no custom CSS. TL,DR:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bit.ly/collection-website">Final website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bit.ly/collection-source">Source code&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="no-api-or-any-backend-work">No API or any backend work&lt;/h2>
&lt;p>A while ago I saw a SaaS product called &lt;a href="https://steinhq.com/">Stein&lt;/a>. You create your data inside a Google Sheets document and they give you an endpoint with your data. Their library works like handlebars and it looks perfect for my use case:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">data-stein-url&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;https://api.steinhq.com/v1/storages/5cc158079ec99a2f484dcb40/Sheet1&amp;#34;&lt;/span> &lt;span style="color:#008080">data-stein-limit&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;2&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h6&lt;/span>&amp;gt;By {{author}}&amp;lt;/&lt;span style="color:#000080">h6&lt;/span>&amp;gt;
{{content}}
Read on &amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{link}}&amp;#34;&lt;/span>&amp;gt;Medium&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="no-js-frameworklibrary-and-tooling">No JS framework/library and tooling&lt;/h2>
&lt;p>Decided to avoid adding a framework or library in this project since the use case didn&amp;rsquo;t need one. All JS interactions on this page are quite simple (show/hide menus, open a modal screen, handle permalinks).&lt;/p>
&lt;p>Since I was not using a framework/library, I would avoid adding webpack and babel. No need to dig into presets and loaders.&lt;/p>
&lt;p>PS. You can argue that I&amp;rsquo;d have chosen create-react-app or Next.js and get all these problems solved, but no.&lt;/p>
&lt;h2 id="no-css-work">No CSS work&lt;/h2>
&lt;p>I love writing CSS, especially when I can use SASS but I decided to do not write CSS here. I had a few good reasons to avoid doing it:&lt;/p>
&lt;ul>
&lt;li>I had no designs and despite I could do something decent-looking, I didn&amp;rsquo;t want to put time and energy on it;&lt;/li>
&lt;li>I wanted to use &lt;a href="https://tailwindcss.com">Tailwind CSS&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>If you never heard about Tailwind CSS, please don&amp;rsquo;t try to think “it is a Bootstrap option”. Here is a good short explanation, from their website:&lt;/p>
&lt;blockquote class="wp-block-quote">
&lt;p>
Most CSS frameworks do too much.&lt;br />&amp;#8230;&lt;br />Instead of opinionated predesigned components, Tailwind provides low-level utility classes that let you build completely custom designs without ever leaving your HTML.
&lt;/p>
&lt;/blockquote>
&lt;p>This is pretty much true. A quick search gives you many web apps “rebuilt” with Tailwind CSS:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/whatsapp-web-clone">Whatsapp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/telegram-desktop-using-tailwindcss">Telegram&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/facebook-clone">Facebook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/reddit-clone">Reddit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/youtube-clone">Youtube&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/slack-clone-1">Slack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/coinbase-clone">Coinbase&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/github-profile-clone">Github&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tailwindcomponents.com/component/trello-panel-clone">Trello&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://codepen.io/drehimself/full/vpeVMx/">Twitter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=_JhTaENzfZQ">Netlify&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="create-a-website-with-good-accessibility">Create a website with good accessibility&lt;/h2>
&lt;p>Last month I started taking accessibility courses at &lt;a href="https://dequeuniversity.com/curriculum/packages/full">Deque University&lt;/a>. Their content is great and it reminders me that &lt;strong>HTML is accessible by default&lt;/strong>. By using a semantic HTML structure and testing basic things like keyboard navigation and colour contrast you eliminate several barries that move people with disabilities from your content. I am not an accessibility expert but here are a few accessibility-related things I&amp;rsquo;ve worked on this website:&lt;/p>
&lt;ul>
&lt;li>Disable stylesheets: by disabling stylesheets you can ensure that your content follows a logical/structural way.&lt;/li>
&lt;li>VoiceOver: VoiceOver is included in macOS and iOS. It is &lt;a href="https://webaim.org/articles/voiceover/">very simple to use it&lt;/a> and by using it you can have a better understanding of how people use this feature.&lt;/li>
&lt;li>Modals: modals can be problematic. Decided to follow &lt;a href="https://bitsofco.de/accessible-modal-dialog/">Ire Aderinokun&amp;rsquo;s&lt;/a> approach.&lt;/li>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd">axe&lt;/a>: the extension is an accessibility checker for WCAG 2 and Section 508 accessibility rules.&lt;/li>
&lt;/ul>
&lt;p>It is not perfect, there are a few things that I didn&amp;rsquo;t work it, like adding a skip link to the main content. If you are curious, &lt;a href="https://github.com/leonardofaria/collection/pull/1">here is the Pull Request with all the changes&lt;/a>.&lt;/p>
&lt;h2 id="create-a-website-that-works-in-old-browsers">Create a website that works in old browsers&lt;/h2>
&lt;p>I couldn&amp;rsquo;t achieve this objective since I had no control over scripts and styles. However, it doesn&amp;rsquo;t seem to be impossible. A few things I noticed:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SteinHQ/Expedite">Expedite&lt;/a> (Stein client) uses &lt;a href="https://github.com/SteinHQ/Expedite/blob/master/index.js#L51-L54">fetch&lt;/a>, which was only &lt;a href="https://caniuse.com/#feat=fetch">added in Safari 10&lt;/a>. The request to their server could be probably replaced for an XMLHttpRequest.&lt;/li>
&lt;li>Tailwind uses flexbox in many elements. Safari only started supporting Flexbox in iOS 7. Maybe I could write a few properties to their existing elements to achieve a decent look.&lt;/li>
&lt;li>SSL Certificates may be an issue to old browsers.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Making this website was super fun. The fact I added “constraints” to it made think outside the box. Out of curiosity, I tracked my time using &lt;a href="https://clockify.me">Clockify&lt;/a> and I&amp;rsquo;ve worked 13h on this, between coding, creating the data, testing and writing this post.&lt;/p></description></item><item><title>Forcing the usage of yarn (and at a specific version)</title><link>https://hugo.leonardofaria.net/2019/10/11/forcing-the-usage-of-yarn-and-at-a-specific-version/</link><pubDate>Fri, 11 Oct 2019 00:40:46 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/10/11/forcing-the-usage-of-yarn-and-at-a-specific-version/</guid><description>&lt;p>People and organizations often have preferences for a specific package manager. At work, we decided to use Yarn due to emoji support (jk) but how to keep everybody using Yarn? &lt;/p>
&lt;p>We can use the &lt;a href="https://docs.npmjs.com/misc/scripts">preinstall hook&lt;/a> to check if the user run &lt;code>npm install&lt;/code>or &lt;code>yarn install&lt;/code>. Here is one example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#d14">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
&lt;span style="color:#d14">&amp;#34;preinstall&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;node -e \&amp;#34;if(process.env.npm_execpath.indexOf(&amp;#39;yarn&amp;#39;) === -1) throw new Error(&amp;#39;You must use Yarn to install, not NPM&amp;#39;)\&amp;#34;&amp;#34;&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run &lt;code>npm install&lt;/code>:&lt;figure class="wp-block-image">&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/10/npm-install.jpg" alt="" class="wp-image-2084" /> &lt;/figure>&lt;/p>
&lt;p>If you want to ignore the checking (CI environment for instance), use the &lt;code>--ignore-scripts&lt;/code> option: &lt;/p>
&lt;p>&lt;code>npm install --ignore-scripts&lt;/code>&lt;/p>
&lt;p>Moreover, you can use the &lt;a href="https://docs.npmjs.com/files/package.json#engines">engines option&lt;/a> of NPM to force a specific version of Node, and/or Yarn. Here is an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#d14">&amp;#34;engines&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
&lt;span style="color:#d14">&amp;#34;yarn&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;1.19.1&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;node&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;12&amp;#34;&lt;/span>
},
&lt;/code>&lt;/pre>&lt;/div>&lt;figure class="wp-block-image">
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/10/npm-engines.jpg" alt="" class="wp-image-2101" /> &lt;/figure>&lt;/p></description></item><item><title>Disabling autofill in Chrome</title><link>https://hugo.leonardofaria.net/2019/10/02/disabling-autofill-in-chrome/</link><pubDate>Wed, 02 Oct 2019 16:58:52 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/10/02/disabling-autofill-in-chrome/</guid><description>&lt;p>Autofill in form elements is a very useful feature in browsers. Creating new accounts or shopping in an online store are examples of this feature saving us time.&lt;/p>
&lt;p>However, the autofill feature can be a problem for SaaS products. Imagine that you want to edit the email address of one of your users. You hit edit in one screen and once you get a form with your user data Chrome will replace their email to your email. This is not a good user experience.&lt;/p>
&lt;p>MDN has an article showing “How to turn off form autocompletion”. The solution is using the autocomplete attribute with an off value. This doesn&amp;rsquo;t work in Chrome.&lt;/p>
&lt;p>Digging in Stackoverflow and Google results, I found a &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=468153#c164">bug issued in 2015 about the topic&lt;/a>. Here is the TL,DR (from March 2016):&lt;/p>
&lt;blockquote>
&lt;p>First off, thanks for everyone&amp;rsquo;s feedback on this. I apologize for our delay in clarifying our stance. We&amp;rsquo;ve been working to finalize our policy regarding Autofill and the autocomplete attribute, and we&amp;rsquo;ve been making changes to this over the past few months (as some of you have noticed).&lt;/p>
&lt;p>First and foremost, Autofill in Chrome exists to help our everyday users get through common forms (address forms, contact forms, checkout forms, etc) across the web. This has become especially important on mobile devices, where typing on virtual keyboards is both difficult and annoying. Autofill tries to make this experience better, and it&amp;rsquo;s used millions of times per day by Chrome users.&lt;/p>
&lt;p>The tricky part here is that somewhere along the journey of the web autocomplete=off become a default for many form fields, without any real thought being given as to whether or not that was good for users. This doesn&amp;rsquo;t mean there aren&amp;rsquo;t very valid cases where you don&amp;rsquo;t want the browser autofilling data (e.g. on CRM systems), but by and large, we see those as the minority cases. And as a result, we started ignoring autocomplete=off for Chrome Autofill data [1].&lt;/p>
&lt;p>We don&amp;rsquo;t just ignore the autocomplete attribute, however. In the WHATWG standard, we defined a series of new autocomplete values that developers can use to better inform the browser about what a particular field is, and we encourage developers to use those types. [2]&lt;/p>
&lt;p>In cases where you really want to disable autofill, our suggestion at this point is to utilize the autocomplete attribute to give valid, semantic meaning to your fields. If we encounter an autocomplete attribute that we don&amp;rsquo;t recognize, we won&amp;rsquo;t try and fill it.&lt;/p>
&lt;p>As an example, if you have an address input field in your CRM tool that you don&amp;rsquo;t want Chrome to Autofill, you can give it semantic meaning that makes sense relative to what you&amp;rsquo;re asking for: e.g. autocomplete=”new-user-street-address”. If Chrome encounters that, it won&amp;rsquo;t try and autofill the field.&lt;/p>
&lt;/blockquote>
&lt;p>I also found a &lt;a href="https://gist.github.com/niksumeiko/360164708c3b326bd1c8">gist&lt;/a> with a few solutions. Many people reported using &lt;code>autocomplete=&amp;quot;new-password&amp;quot;&lt;/code> fixes this issue but I have no success on this front. Which solved the issue for me is setting the form fields to read only and then removing the attribute once the user focus them.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">input&lt;/span> &lt;span style="color:#008080">readonly&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;readonly&amp;#34;&lt;/span> &lt;span style="color:#008080">onfocus&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;this.removeAttribute(&amp;#39;readonly&amp;#39;);&amp;#34;&lt;/span> &lt;span style="color:#008080">type&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#008080">value&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;user@email.com&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>My list of GitHub tips and third-party apps</title><link>https://hugo.leonardofaria.net/2019/09/03/my-list-of-github-tips-and-third-party-apps/</link><pubDate>Tue, 03 Sep 2019 11:42:19 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/09/03/my-list-of-github-tips-and-third-party-apps/</guid><description>&lt;p>I work at Thinkific with 20+ other developers (we are &lt;a href="http://bit.ly/thnk-eng-team-lead">hiring&lt;/a> &lt;a href="http://bit.ly/thnk-eng-lead">for&lt;/a> &lt;a href="http://bit.ly/thnk-senior-front-end-engineer">multiple&lt;/a> positions) in different codebases. GitHub is part of our toolkit, and I decided to write a post sharing a few Chrome extensions, integrations and third-party apps that help me be productive as an individual contributor and organized as code reviewer and team lead.&lt;/p>
&lt;h2 id="chrome-extensions">Chrome extensions&lt;/h2>
&lt;h3 id="refined-githubhttpschromegooglecomwebstoredetailrefined-githubhlepfoohegkhhmjieoechaddaejaokhfhlen">&lt;a href="https://chrome.google.com/webstore/detail/refined-github/hlepfoohegkhhmjieoechaddaejaokhf?hl=en">Refined GitHub&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://sindresorhus.com/">Sindre Sorhus&lt;/a> extension brings a &lt;a href="https://github.com/sindresorhus/refined-github#repositories">massive list of improvements&lt;/a> to GitHub UI and many of them have become part of the product after a bit.&lt;/p>
&lt;h3 id="better-pull-request-for-githubhttpschromegooglecomwebstoredetailbetter-pull-request-for-gnfhdjopbhlggibjlimhdbogflgmbiahchlen">&lt;a href="https://chrome.google.com/webstore/detail/better-pull-request-for-g/nfhdjopbhlggibjlimhdbogflgmbiahc?hl=en">Better Pull Request for GitHub&lt;/a>&lt;/h3>
&lt;p>This extension list project files in a tree. This is quite useful when you have a big pull request and you need to go back and forth to understand better what is going on.&lt;figure class="wp-block-image">&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/09/better-pull-request-for-github.jpg" alt="" class="wp-image-1984" /> &lt;/figure>&lt;/p>
&lt;h3 id="github-hovercardhttpschromegooglecomwebstoredetailgithub-hovercardmmoahbbnojgkclgceahhakhnccimnplkhlen">&lt;a href="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk?hl=en">GitHub Hovercard&lt;/a>&lt;/h3>
&lt;p>This extension shows info about a user, project, issue or commit. It is a cool UI trick like Facebook does. This extension even works for private repositories, as long as you have a valid token to grab the information of the service.&lt;figure class="wp-block-image">&lt;/p>
&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/09/hover-cards.jpg" alt="" class="wp-image-1986" /> &lt;/figure>&lt;/p>
&lt;h3 id="github-repository-sizehttpschromegooglecomwebstoredetailgithub-repository-sizeapnjnioapinblneaedefcnopcjepgkcihlen">&lt;a href="https://chrome.google.com/webstore/detail/github-repository-size/apnjnioapinblneaedefcnopcjepgkci?hl=en">GitHub Repository Size&lt;/a>&lt;/h3>
&lt;p>This extension automatically adds the repository size and individual files size&lt;/p>
&lt;h3 id="file-icon-for-github-and-gitlabhttpschromegooglecomwebstoredetailfile-icon-for-github-andficfmibkjjnpogdcfhfokmihanoldbfe">&lt;a href="https://chrome.google.com/webstore/detail/file-icon-for-github-and/ficfmibkjjnpogdcfhfokmihanoldbfe">File Icon for GitHub and GitLab&lt;/a>&lt;/h3>
&lt;p>Not a lot to say here :)&lt;/p>
&lt;h2 id="integrations">Integrations&lt;/h2>
&lt;h3 id="pull-pandahttpspullpandacom">&lt;a href="https://pullpanda.com/">Pull Panda&lt;/a>&lt;/h3>
&lt;p>Pull Panda is an integration GitHub acquired &lt;a href="https://pullpanda.com/github">a few months ago&lt;/a> and they have added for free in the product. It is very handy because you can map GitHub users to Slack users and then they will get inside Slack all the information about the work they are following in Slack. Pull Panda delivers comments in PRS and even tell you about git conflicts (I love and hate this one).&lt;/p>
&lt;p>Pull Panda can also spot bottlenecks, show who are the ones most pushing/reviewing code and even assign automatically people to Pull Requests.&lt;/p>
&lt;h2 id="macos-apps">macOS apps&lt;/h2>
&lt;h3 id="gitifyhttpswwwgitifyio">&lt;a href="https://www.gitify.io/">Gitify&lt;/a>&lt;/h3>
&lt;p>Gitify lives in your Mac menu bar and it is quite simple to understand. If the icon is green, you have a notification! It is also cool to mention the app is &lt;a href="https://github.com/manosim/gitify">open-source&lt;/a> (Electron-based, if you are curious).&lt;/p>
&lt;h3 id="questshttpssteamclockcomquests">&lt;a href="https://steamclock.com/quests/">Quests&lt;/a>&lt;/h3>
&lt;p>Quests is similar to Gitify but one important difference here is Quest also supports GitLab.&lt;/p>
&lt;h2 id="ios-apps">iOS apps&lt;/h2>
&lt;h3 id="githawkhttpgithawkcom">&lt;a href="http://githawk.com/">Githawk&lt;/a>&lt;/h3>
&lt;p>Gitwalk is my favourite iOS app for GitHub. It lists pull requests in a friendly way and I like how you can see the files affected in the PR and all conversation in place. If you need to take a lot at a pull request when you are not in front of the computer, this app is for you!&lt;/p>
&lt;p>&lt;em>What are your GitHub tricks? Let me know in the comments :)&lt;/em>&lt;/p></description></item><item><title>Newsletters to subscribe</title><link>https://hugo.leonardofaria.net/2019/05/14/newsletters-to-subscribe/</link><pubDate>Tue, 14 May 2019 23:54:26 -0300</pubDate><guid>https://hugo.leonardofaria.net/2019/05/14/newsletters-to-subscribe/</guid><description>&lt;p>In the last years, newsletters became more and more popular. Along with Twitter and RSS, it is one of my favourite ways to keep me updated it. Here are the ones I follow:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://softwareleadweekly.com/">Software Lead Weekly&lt;/a> – if you are a team lead, engineer manager, CTO you will like this one. Worth to mention their Slack group.&lt;/li>
&lt;li>&lt;a href="https://changelog.com/">Changelog&lt;/a> – independently of your stack, Changelog is a rich newsletter with interviews and tool suggestions. They also have a podcast – &lt;a href="https://email.changelog.com/t/ViewEmail/t/07B6AC1A841DD8ED2540EF23F30FEDED/D6D7BA67637E86A7F1E87EB810D8F10A">Example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.densediscovery.com/">Dense Directory&lt;/a> – Every Tuesday a newsletter helping web workers be productive, stay inspired and think critically&lt;/li>
&lt;li>&lt;a href="https://umaar.com/dev-tips/">dev tips&lt;/a> – Chrome Dev Tools gifs weekly in your email.&lt;/li>
&lt;li>&lt;a href="https://javascriptweekly.com/">JavaScript Weekly&lt;/a> – a once–weekly email roundup of JavaScript news and articles&lt;/li>
&lt;li>&lt;a href="https://react.statuscode.com/">React Status&lt;/a> – another one about JavaScript but React focused – &lt;a href="https://react.statuscode.com/issues/136">Example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rubyweekly.com/">Ruby Weekly&lt;/a> – once-weekly emails about Ruby. This one and the previous two are curated by &lt;a href="https://cooperpress.com/">cooperpress&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gomakethings.com/articles/">Daily Developer Tips&lt;/a> – code snippets, tools, techniques, and interesting stuff from around the web.&lt;/li>
&lt;li>&lt;a href="https://www.l2inc.com/daily-insights">Gartner L2 Daily Insights&lt;/a> – news and research analysis across digital marketing, site &amp;amp; e-commerce, mobile and social media.&lt;/li>
&lt;/ul></description></item><item><title>It Doesn't Have to Be Crazy at Work and Joy, Inc.: How We Built a Workplace People Love reviews</title><link>https://hugo.leonardofaria.net/2019/01/23/it-doesnt-have-to-be-crazy-at-work-and-joy-inc-how-we-built-a-workplace-people-love-reviews/</link><pubDate>Wed, 23 Jan 2019 04:41:05 -0200</pubDate><guid>https://hugo.leonardofaria.net/2019/01/23/it-doesnt-have-to-be-crazy-at-work-and-joy-inc-how-we-built-a-workplace-people-love-reviews/</guid><description>&lt;p>&lt;img src="https://hugo.leonardofaria.net/wp-content/uploads/2019/01/IMG_4455.jpg" alt="Book covers">&lt;/p>
&lt;p>In the last couple of months, I read It Doesn&amp;rsquo;t Have to Be Crazy at Work and Joy, Inc.: How We Built a Workplace People Love. They both cover how two successful tech companies operate their activities in a very proud way. Reading these books can be inspirational for your company but at the same time, it does require a grain of salt.&lt;/p>
&lt;p>In It Doesn&amp;rsquo;t Have to Be Crazy at Work, David Heinemeier Hansson / Jason Fried share how they keep Basecamp processes and team calm. I liked how they covered time management, culture and so many other topics in a compact book but at the same time, the book &lt;g class="gr_ gr\_6 gr-alert gr\_gramm gr\_inline\_cards gr\_run\_anim Grammar multiReplace" id="6" data-gr-id="6">is swallow&lt;/g>. It is fascinating reading that Basecamp has no goals, for instance, but would love to read their experience in this matter. If you already follow DHH / JF on Twitter, you will recognize a few points of the book in their 140 &lt;g class="gr_ gr\_561 gr-alert gr\_spell gr\_inline\_cards gr\_disable\_anim_appear ContextualSpelling ins-del multiReplace" id="561" data-gr-id="561">caracter&lt;/g> messages. Anyway, here is a great part:&lt;/p>
&lt;blockquote class="wp-block-quote">
&lt;p>
“No is easier to do, yes is easier to say.&lt;br /> No is no to one thing.&lt;br /> Yes is no to a thousand things.&lt;br /> No is a precision instrument, a surgeon’s scalpel, a laser beam focused on one point.&lt;br /> Yes is a blunt object, a club, a fisherman’s net that catches everything indiscriminately.&lt;br /> No is specific.&lt;br /> Yes is general.&lt;br /> When you say no to one thing, it’s a choice that breeds choices. Tomorrow you can be as open to new opportunities as you were today.”
&lt;/p>
&lt;/blockquote>
&lt;p>In Joy, Inc.: How We Built a Workplace People Love, Richard Sheridan brings lots of elements and process from Agile to readers. It sounds like an Agile 101 but with real-world examples, what can give people the courage of trying new processes. At the same time, I saw some parts with a huge scepticism like when he mentioned that employee referrals are a terrible HR tactic or people wearing headphones are not a good fit to his noisy restaurant company.&lt;/p>
&lt;p>At the end of the day, people can see both books are marketing pieces exposing two tech companies. They sound different in several points but they both agree that too many meetings are bad, too many benefits are traps and work/life balance is important to individuals and for many, this is the message that needs to be remembered.&lt;/p></description></item></channel></rss>