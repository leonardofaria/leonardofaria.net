<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Leonardo Faria</title><link>https://leonardofaria.net/tags/git/</link><description>Recent content in git on Leonardo Faria</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Jan 2013 18:53:58 -0200</lastBuildDate><atom:link href="https://leonardofaria.net/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Gource, uma forma estilosa de ver logs do seu controle de versão</title><link>https://leonardofaria.net/2013/01/20/gource-uma-forma-estilosa-de-ver-logs-do-seu-controle-de-versao/</link><pubDate>Sun, 20 Jan 2013 18:53:58 -0200</pubDate><guid>https://leonardofaria.net/2013/01/20/gource-uma-forma-estilosa-de-ver-logs-do-seu-controle-de-versao/</guid><description>&lt;p>O &lt;a href="http://catarse.me/">Catarse&lt;/a> é uma plataforma brasileira de &lt;a href="http://pt.wikipedia.org/wiki/Crowdfunding">crowdfunding&lt;/a> que em &lt;a href="http://blog.catarse.me/2-anos-de-catarse/">2 anos já apoiou mais de 700 projetos, movimentando quase 5 milhões de reais&lt;/a>. São números impressionantes, estão todos de parabéns por fazer acontecer, mas não é essa a razão do meu post :)&lt;/p>
&lt;p>Ao me deparar com seu &lt;a href="http://blog.catarse.me/2-anos-de-catarse/">post de estatísticas&lt;/a>, o &lt;a href="http://vimeo.com/57631568">vídeo da evolução do código-fonte&lt;/a> do app deles me chamou a atenção. Ele foi feito com o &lt;a href="http://code.google.com/p/gource/">Gource&lt;/a>, que até o momento não conhecia. Esse aplicativo lê os logs do sistema de controle de versão (Git, Mercurial, Bazaar, Subversion) do seu projeto e gera a visualização gráfica da evolução do desenvolvimento. Por exemplo, o vídeo abaixo mostra a &lt;a href="http://www.youtube.com/embed/r0ji8FDNTj0">evolução dos commits de 2004 a 2009 do Rails&lt;/a>:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/r0ji8FDNTj0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>O Youtube está &lt;a href="http://www.youtube.com/results?search_query=gource">cheio de vídeos desse tipo&lt;/a>. Se você usa Mac OS, pode instalar o gource via port:&lt;/p>
&lt;pre>&lt;code>port install gource
&lt;/code>&lt;/pre></description></item><item><title>Migrando um repositório SVN para GIT</title><link>https://leonardofaria.net/2013/01/04/migrando-um-repositorio-svn-para-git/</link><pubDate>Fri, 04 Jan 2013 12:39:33 -0200</pubDate><guid>https://leonardofaria.net/2013/01/04/migrando-um-repositorio-svn-para-git/</guid><description>&lt;p>Nos últimos dias, pesquisei uma forma de migrar um repositório de SVN para GIT e quando consegui fazer, percebi que era mais fácil que eu imagina. Com isso, resolvi escrever uma receitinha de como fazer isso.&lt;/p>
&lt;p>Inicialmente você deve criar um arquivo mapeando seus usuários do SVN para o GIT. Ele deverá ter o formato abaixo:&lt;/p>
&lt;pre>&lt;code>leonardo = Leonardo Faria &amp;lt;leonardo@email.com&amp;gt;
autor2 = Autor &amp;lt;autor@email.com&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Nota: caso você não queira manualmente escrever esse arquivo, vasculhe o log do seu projeto SVN e obtenha a lista de autores automaticamente:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">svn log -q | awk -F &lt;span style="color:#d14">&amp;#39;|&amp;#39;&lt;/span> &lt;span style="color:#d14">&amp;#39;/^r/ {sub(&amp;#34;^ &amp;#34;, &amp;#34;&amp;#34;, $2); sub(&amp;#34; $&amp;#34;, &amp;#34;&amp;#34;, $2); print $2&amp;#34; = &amp;#34;$2&amp;#34; &amp;lt;&amp;#34;$2&amp;#34;&amp;gt;&amp;#34;}&amp;#39;&lt;/span> | sort -u &amp;gt; authors.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A seguir, crie um novo repositório e defina os autores dos commits de acordo com o criado no arquivo acima.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">mkdir repo &lt;span style="color:#000;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0086b3">cd&lt;/span> repo
git svn init http://server/svn/project/trunk --no-metadata
git config svn.authorsfile ~/authors.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lembre-se que todos os autores de commits devem constar no arquivo, caso contrário o processo não irá funcionar. Em seguida, execute:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git svn fetch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dependendo do tamanho do seu repositório, isso pode demorar um pouco.&lt;br>
Em seguida, é só adicionar as configurações do servidor e pronto!&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git remote add origin git@server:path/repo.git
git push -u origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="uma-coisa-mais">Uma coisa mais&lt;/h3>
&lt;p>Você também pode converter as propriedades do svn:ignore para um arquivo .gitignore. Para isso:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git svn show-ignore &amp;gt; .gitignore
git add .gitignore
git commit -m &lt;span style="color:#d14">&amp;#39;Convert svn:ignore properties to .gitignore.&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Sobre Controle de Versão</title><link>https://leonardofaria.net/2008/05/31/sobre-controle-de-versao/</link><pubDate>Sat, 31 May 2008 17:38:06 -0300</pubDate><guid>https://leonardofaria.net/2008/05/31/sobre-controle-de-versao/</guid><description>&lt;p>Na disciplina de Engenharia de Software que faço no curso de Sistemas de Informação da Faculdade Pitágoras, fiz um trabalho introdutório sobre Sistemas de Controle de Versão. O trabalho está abaixo e também disponível em &lt;a href="https://leonardofaria.net/wp-content/uploads/2008/05/controle.pdf">PDF&lt;/a>.&lt;/p>
&lt;h3 id="introdução">Introdução&lt;/h3>
&lt;p>O desenvolvimento de software envolve um processo contínuo de evolução de código e baseado nesse paradigma, surgiu a necessidade do desenvolvimento de uma solução que gerenciasse o controle de versões dos códigos-fonte, da documentação e do compartilhamento de trabalho. Assim, surgiram os softwares responsáveis de controle de versão.&lt;/p>
&lt;p>Entre suas funções, os Sistemas de Controle de Versão se destacam por possibilitar:&lt;/p>
&lt;ul>
&lt;li>Controle do histórico: possibilidade de se ter um histórico do desenvolvimento, bem como a possibilidade de rastrear as alterações feitas durante um projeto.&lt;/li>
&lt;li>Trabalho em equipe: oportunidade de possibilitar a divisão de tarefas de forma que não comprometa a integridade total do projeto. Desse modo, pode-se dividir uma equipe de programadores sem que nenhum atrapalhe o projeto do outro, tudo isso sem problemas de sincronização de arquivos.&lt;/li>
&lt;li>Marcação e resgate de versões estáveis: a utilização dos Sistemas de Controle de Versão facilita a restauração de versões funcionais. Desse modo, é possível trabalhar com segurança o desenvolvimento de uma versão de software sem o comprometimento da versão estável.&lt;/li>
&lt;li>Apresentando todo essas vantagens, o Controle de Versão é amplamente usado no desenvolvimento de sistemas. Seja em times pequenos ou grandes, softwares livres ou fechados, o Controle de Versão organiza e centraliza decisões.&lt;/li>
&lt;/ul>
&lt;h3 id="funcionamento">Funcionamento&lt;/h3>
&lt;p>Existem diversas soluções para Controle de Versão, gratuitas e pagas. Entre as opções pagas, destacam-se o SourceSafe (Microsoft) e ClearCase (IBM). Entre as opções gratuitas, estão o CVS, o SVN e o Git.&lt;br>
Todas essas ferramentas tem em comum a forma de funcionamento. Em um rápido resumo:&lt;/p>
&lt;ol>
&lt;li>Existe um repositório em um servidor qualquer. Esse servidor armazena todas as versões do software.&lt;/li>
&lt;li>Os desenvolvedores (clientes) acessam o repositório e trabalham nos arquivos do projeto, em seus respectivos computadores.&lt;/li>
&lt;li>Periodicamente, os desenvolvedores enviam o código atualizado para o repositório (commit).&lt;/li>
&lt;/ol>
&lt;h3 id="comparativo-svn-e-sourcesafe">Comparativo: SVN e SourceSafe&lt;/h3>
&lt;p>Para um comparativo, escolhemos dois sistemas bastante antagônicos: o SVN, solução livre e o SourceSafe, da Microsoft. O SVN funciona apenas com a arquitetura cliente-servidor, enquanto o SourceSafe possibilita a utilização de repositórios distribuídos, além de também trabalhar no&lt;br>
modo cliente-servidor.&lt;br>
Outra diferença significativa está que o SourceSafe funciona apenas em plataforma Windows, e que surgiu de uma demanda interna da própria Microsoft. Já o SVN é multi-plataforma e livre.&lt;br>
Além disso, é importante ressaltar outra diferença entre os dois: facilidade de utilização. O SVN funciona a partir do terminal (e através de ferramentas de frontend) e é bem mais simples de instalar e gerenciar do que a ferramenta de controle de versões da empresa de Redmond.&lt;/p>
&lt;h3 id="conclusão">Conclusão&lt;/h3>
&lt;p>Para um desenvolvimento profissional de aplicações, é imprescindível o Controle de Versão. É ele que garante a integridade do projeto e é, além de ter todas as vantagens apresentadas nesse trabalho, outra forma de previnir acidentes de percurso no desenvolvimento, como estações que podem parar de funcionar por causas diversas.&lt;/p></description></item></channel></rss>