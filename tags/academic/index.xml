<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>academic on Leonardo Faria</title><link>https://leonardofaria.net/tags/academic/</link><description>Recent content in academic on Leonardo Faria</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 Jun 2008 20:21:15 -0300</lastBuildDate><atom:link href="https://leonardofaria.net/tags/academic/index.xml" rel="self" type="application/rss+xml"/><item><title>Extreme Programming para todos</title><link>https://leonardofaria.net/2008/06/07/extreme-programming-para-todos/</link><pubDate>Sat, 07 Jun 2008 20:21:15 -0300</pubDate><guid>https://leonardofaria.net/2008/06/07/extreme-programming-para-todos/</guid><description>&lt;p>Esse é outro post &lt;a href="http://www.leonardofaria.net/tag/academico">acadêmico&lt;/a> e novamente um artigo para a disciplina de Engenharia de Software. O artigo está abaixo e dessa vez há também &lt;a href="https://leonardofaria.net/wp-content/uploads/2008/06/XP.pdf">slides&lt;/a> (PDF, 2 MB) da apresentação feita na &lt;a href="http://www.faculdadepitagoras.com.br/">Faculdade Pitágoras&lt;/a>.&lt;/p>
&lt;p>Naturalmente, essa não é a maior referência sobre XP, apenas uma boa introdução sobre o tema. Especialistas mesmo são o &lt;a href="http://www.improveit.com.br/vinicius">Vinícius Teles&lt;/a> e o time da &lt;a href="http://www.improveit.com.br">Improve It&lt;/a>, que possuem um &lt;a href="http://www.improveit.com.br/xp">ótimo conteúdo&lt;/a> sobre o assunto. Vamos lá:&lt;/p>
&lt;h3 id="introdução">Introdução&lt;/h3>
&lt;p>Extreme Programming é uma metodologia de desenvolvimento de software que visa a criação de sistemas de melhor qualidade, produzidos em menos tempo e com menores custos. Criada por Kent Beck no fim da década de 90, o desenvolvimento ágil é atingido através de alguns valores e práticas que muito divergem dos conceitos tradicionais.&lt;/p>
&lt;h3 id="valores">Valores&lt;/h3>
&lt;p>O XP, como também é chamado o Extreme Programming, estabelece alguns valores para que a empresa de desenvolvimento não se perca em seu projeto e para que o cliente tenha um acompanhamento real do que está pedindo (e pagando). Entre os valores estão: comunicação, coragem, feedback e simplicidade.&lt;/p>
&lt;p>&lt;strong>Comunicação&lt;/strong>&lt;/p>
&lt;p>A comunicação é um importante fator no processo de criação e é privilegiada no Extreme Programming, como premissa para garantir o sucesso do desenvolvimento. No XP, cliente e equipe de desenvolvimento ficam cara-a-cara, o que evita mal entendidos e especulações. Essa comunicação é muito positiva para ambos, pois, além de possibilitar o enriquecimento das relações pessoais, faz com o que o cliente faça parte de todo um processo de criação, além de dar a ele um entendimento e domínio cada vez maior do que está querendo.&lt;/p>
&lt;p>&lt;strong>Coragem&lt;/strong>&lt;/p>
&lt;p>Outro mandamento do XP é a coragem, no que diz respeito a quebra de paradigmas tradicionais no desenvolvimento. Isso significa que menos é mais: menos documentação, menos modelagem e menos testes manuais. Além disso, é possibilitar o cliente a definir prioridades e manter o sistema sempre simples.&lt;/p>
&lt;p>&lt;strong>Feedback&lt;/strong>&lt;/p>
&lt;p>Um dos alicerces mais importantes do Extreme Programming é o Feedback imediato. No feedback, o cliente tem a oportunidade de corrigir falhas que surgem no desenvolvimento e aprender em etapas o funcionamento do seu software – o que é bem mais sútil que o modelo tradicional de desenvolvimento. Além disso, dá ao desenvolvedor a oportunidade de apontar problemas e alternativas do que está sendo solicitado em tempo real.&lt;/p>
&lt;p>&lt;strong>Simplicidade&lt;/strong>&lt;/p>
&lt;p>O conceito de simplicidade do XP possui certa relação com o Just in Time, sistema de produção criado pela Toyota na década de 50. Assim como no Toyotismo, o XP prega a simplicidade como máxima. Isso significa escrever somente o necessário para que um requisito funcione e evitar suposições para o futuro.&lt;/p>
&lt;h3 id="práticas">Práticas&lt;/h3>
&lt;p>Valores podem ser simples palavras caso não se tenha uma postura condizente com o que se prega. O Extreme Programming têm interessantes práticas. As principais são:&lt;/p>
&lt;p>&lt;strong>Desenvolvimento Orientado a Testes&lt;/strong>&lt;/p>
&lt;p>Cria os testes unitários (unit tests) e depois cria o código para que os testes funcionem. Esta abordagem é complexa no início, pois vai contra o processo de desenvolvimento de muitos anos. Entretanto, os testes unitários são essenciais para que a qualidade do projeto seja mantida.&lt;/p>
&lt;p>&lt;strong>Integração Contínua&lt;/strong>&lt;/p>
&lt;p>Nunca espera para integrar à versão atual do sistema uma nova funcionalidade. Integrar de forma contínua permite saber o real status do desenvolvimento.&lt;/p>
&lt;p>&lt;strong>Jogo de Planejamento&lt;/strong>&lt;/p>
&lt;p>O desenvolvimento é feito em iterações semanais. A cada começo de semana, desenvolvedores e cliente se reúnem para priorizar as funcionalidades. Ao longo da semana, o projeto é desenvolvido para que, ao final de cada semana, o cliente receba as novas funcionalidades, teste-as e caso aprove, sejam colocada em produção.&lt;/p>
&lt;p>&lt;strong>Pequenas Versões&lt;/strong>&lt;/p>
&lt;p>A liberação de pequenas versões funcionais auxilia o processo de aceitação e absorção do software por parte do cliente.&lt;/p>
&lt;p>&lt;strong>Programação em pares&lt;/strong>&lt;img src="https://leonardofaria.net/wp-content/uploads/2008/06/xp1.jpg" title="Programação em par" width="300" align="right" class="photo white" />&lt;/p>
&lt;p>A programação em pares é um dos principais diferenciais do XP. Dois profissionais trabalhando juntos produzem códigos mais limpos, funcionais, revisados e sujeito a menos falhas.&lt;/p>
&lt;p>&lt;strong>Projeto Simples&lt;/strong>&lt;/p>
&lt;p>A simplicidade de um projeto está em fazer apenas o que o cliente solicita, não se preocupando em atender a requisitos não pedidos. Por exemplo: caso o cliente tenha pedido que na primeira versão apenas o usuário “teste” possa entrar no sistema com a senha “123” e assim ter acesso a todo o sistema, você vai fazer o código exato para que esta funcionalidade seja implementada, sem se preocupar com sistemas de autenticação e restrições de acesso.&lt;/p>
&lt;p>&lt;strong>Refatoração&lt;/strong>&lt;/p>
&lt;p>A refatoração é um processo continuamente feito. Significa melhorara a clareza do cógido, dividindo-o em módulos coesos e de maior aproveitamento, baseando-se no conceito DRY (don&amp;rsquo;t repeat yourself – não se repita).&lt;/p>
&lt;p>&lt;strong>Reuniões em pé&lt;/strong>&lt;/p>
&lt;p>Reuniões em pé para não se perder o foco nos assuntos, produzindo reuniões rápidas, apenas abordando tarefas realizadas e tarefas a realizar pela equipe.&lt;/p>
&lt;p>&lt;strong>Ritmo Sustentável&lt;/strong>&lt;/p>
&lt;p>Ritmo Sustentável significa trabalhar com qualidade, buscando ter ritmo de trabalho saudável (40 horas/semana, 8 horas/dia), sem horas extras. Horas extras, ao contrário do que parece, pode não trazer a produtividade esperada. Outra prática que se verifica neste processo é a prática de trabalho energizado, onde se busca trabalho motivado sempre. Para isto o ambiente de trabalho e a motivação da equipe devem estar sempre em harmonia.&lt;/p>
&lt;p>&lt;strong>Time Coeso&lt;/strong>&lt;/p>
&lt;p>A equipe de desenvolvimento é formada pelo cliente e pela equipe de desenvolvimento. Isso significa que o cliente deve ter disponibilidade e boa vontade para um trabalho satisfatório.&lt;/p>
&lt;h3 id="equipe">Equipe&lt;/h3>
&lt;p>Uma equipe de Extreme Programming possui desenvolvedores que desempenham diferentes papéis. São eles:&lt;/p>
&lt;p>&lt;strong>Gerente de Projeto&lt;/strong>&lt;/p>
&lt;p>Principal responsável pelo relacionamento com o cliente, além de ser responsável também por filtrar assuntos e requisitos desnecessários.&lt;/p>
&lt;p>&lt;strong>Coach&lt;/strong>&lt;/p>
&lt;p>Responsável pelas questões técnicas do projeto. Recomenda-se que o coach seja a pessoa com maior conhecimento do processo de desenvolvimento, dos valores e práticas do XP, para que possa verificar o desenvolvimento e apontar eventuais erros da equipe.&lt;/p>
&lt;p>&lt;strong>Analista de Teste&lt;/strong>&lt;/p>
&lt;p>Responsável em garantir a qualidade do sistema através dos testes escritos. Ele deve ajudar o cliente a escrever os casos de testes e no final de cada iteração verificar se o software atende todos os casos de testes. Em muitos casos, o Analista em Teste também escreve a documentação.&lt;/p>
&lt;p>&lt;strong>Redator Técnico&lt;/strong>&lt;/p>
&lt;p>Responsável por escrever a documentação mínima necessária do projeto, tirando dos desenvolvedores essa tarefa.&lt;/p>
&lt;p>&lt;strong>Desenvolvedor&lt;/strong>&lt;/p>
&lt;p>Responsável em analisar, projetar e codificar o sistema. No XP não existe diferença entre analista, projetista e programador uma vez que em vários momentos do projeto o desenvolvedor estará exercendo alguma destas atividades.&lt;/p>
&lt;h3 id="conclusão">Conclusão&lt;/h3>
&lt;p>Existem várias formas de se conduzir um processo de desenvolvimento de software. O sucesso da aplicação independe do processo de desenvolvimento escolhido, desde que essa seja seguido corretamente com o comprometimento do cliente e da equipe de desenvolvedores. O Extreme Programming está entre as melhores metodologias por acreditar em um fator fundamental: a comunicação entre todos os participantes.&lt;/p></description></item><item><title>Sobre Controle de Versão</title><link>https://leonardofaria.net/2008/05/31/sobre-controle-de-versao/</link><pubDate>Sat, 31 May 2008 17:38:06 -0300</pubDate><guid>https://leonardofaria.net/2008/05/31/sobre-controle-de-versao/</guid><description>&lt;p>Na disciplina de Engenharia de Software que faço no curso de Sistemas de Informação da Faculdade Pitágoras, fiz um trabalho introdutório sobre Sistemas de Controle de Versão. O trabalho está abaixo e também disponível em &lt;a href="https://leonardofaria.net/wp-content/uploads/2008/05/controle.pdf">PDF&lt;/a>.&lt;/p>
&lt;h3 id="introdução">Introdução&lt;/h3>
&lt;p>O desenvolvimento de software envolve um processo contínuo de evolução de código e baseado nesse paradigma, surgiu a necessidade do desenvolvimento de uma solução que gerenciasse o controle de versões dos códigos-fonte, da documentação e do compartilhamento de trabalho. Assim, surgiram os softwares responsáveis de controle de versão.&lt;/p>
&lt;p>Entre suas funções, os Sistemas de Controle de Versão se destacam por possibilitar:&lt;/p>
&lt;ul>
&lt;li>Controle do histórico: possibilidade de se ter um histórico do desenvolvimento, bem como a possibilidade de rastrear as alterações feitas durante um projeto.&lt;/li>
&lt;li>Trabalho em equipe: oportunidade de possibilitar a divisão de tarefas de forma que não comprometa a integridade total do projeto. Desse modo, pode-se dividir uma equipe de programadores sem que nenhum atrapalhe o projeto do outro, tudo isso sem problemas de sincronização de arquivos.&lt;/li>
&lt;li>Marcação e resgate de versões estáveis: a utilização dos Sistemas de Controle de Versão facilita a restauração de versões funcionais. Desse modo, é possível trabalhar com segurança o desenvolvimento de uma versão de software sem o comprometimento da versão estável.&lt;/li>
&lt;li>Apresentando todo essas vantagens, o Controle de Versão é amplamente usado no desenvolvimento de sistemas. Seja em times pequenos ou grandes, softwares livres ou fechados, o Controle de Versão organiza e centraliza decisões.&lt;/li>
&lt;/ul>
&lt;h3 id="funcionamento">Funcionamento&lt;/h3>
&lt;p>Existem diversas soluções para Controle de Versão, gratuitas e pagas. Entre as opções pagas, destacam-se o SourceSafe (Microsoft) e ClearCase (IBM). Entre as opções gratuitas, estão o CVS, o SVN e o Git.&lt;br>
Todas essas ferramentas tem em comum a forma de funcionamento. Em um rápido resumo:&lt;/p>
&lt;ol>
&lt;li>Existe um repositório em um servidor qualquer. Esse servidor armazena todas as versões do software.&lt;/li>
&lt;li>Os desenvolvedores (clientes) acessam o repositório e trabalham nos arquivos do projeto, em seus respectivos computadores.&lt;/li>
&lt;li>Periodicamente, os desenvolvedores enviam o código atualizado para o repositório (commit).&lt;/li>
&lt;/ol>
&lt;h3 id="comparativo-svn-e-sourcesafe">Comparativo: SVN e SourceSafe&lt;/h3>
&lt;p>Para um comparativo, escolhemos dois sistemas bastante antagônicos: o SVN, solução livre e o SourceSafe, da Microsoft. O SVN funciona apenas com a arquitetura cliente-servidor, enquanto o SourceSafe possibilita a utilização de repositórios distribuídos, além de também trabalhar no&lt;br>
modo cliente-servidor.&lt;br>
Outra diferença significativa está que o SourceSafe funciona apenas em plataforma Windows, e que surgiu de uma demanda interna da própria Microsoft. Já o SVN é multi-plataforma e livre.&lt;br>
Além disso, é importante ressaltar outra diferença entre os dois: facilidade de utilização. O SVN funciona a partir do terminal (e através de ferramentas de frontend) e é bem mais simples de instalar e gerenciar do que a ferramenta de controle de versões da empresa de Redmond.&lt;/p>
&lt;h3 id="conclusão">Conclusão&lt;/h3>
&lt;p>Para um desenvolvimento profissional de aplicações, é imprescindível o Controle de Versão. É ele que garante a integridade do projeto e é, além de ter todas as vantagens apresentadas nesse trabalho, outra forma de previnir acidentes de percurso no desenvolvimento, como estações que podem parar de funcionar por causas diversas.&lt;/p></description></item></channel></rss>