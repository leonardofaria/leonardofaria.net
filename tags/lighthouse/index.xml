<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lighthouse on Leonardo Faria</title><link>https://leonardofaria.github.io/leonardofaria.net/tags/lighthouse/</link><description>Recent content in lighthouse on Leonardo Faria</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Nov 2020 05:00:00 +0000</lastBuildDate><atom:link href="https://leonardofaria.github.io/leonardofaria.net/tags/lighthouse/index.xml" rel="self" type="application/rss+xml"/><item><title>My experience using Lighthouse in the real world</title><link>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/</link><pubDate>Mon, 30 Nov 2020 05:00:00 +0000</pubDate><guid>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/</guid><description>&lt;p>Lighthouse has been part of my daily work for the last few months and I shared some snippets in my last few posts. For this particular post, it is time to share how I am using Lighthouse in a product used by millions of people and what I have discovered during this process.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse.jpg" alt="Lighthouse photo by Robert Wiedemann">&lt;/p>
&lt;p>&lt;em>Disclaimers&lt;/em>: 1. This content may be reviewed in the future as I learn more about web performance and Lighthouse; 2. Do not take this post as professional/legal advice; 3. Do not take my comments on tech X or Y as attacks to tech X or Y.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="use-existing-tools-before-creating-your-own">Use existing tools before creating your own&lt;/h2>
&lt;p>It sounds obvious but it doesn’t hurt to repeat the message: do not reinvent the wheel (until you absolutely need to). You can start &lt;a href="https://support.google.com/webmasters/answer/9205520">monitoring Core Web Vitals for free&lt;/a> in the Google Search Console.&lt;/p>
&lt;p>If this is not enough, or if you have a complex web app behind authentication, or any other scenarios, you can start by using a tool listed in the &lt;a href="https://github.com/GoogleChrome/lighthouse#lighthouse-integrations-in-web-perf-services">Lighthouse integrations docs&lt;/a>. From that list, I can only speak of &lt;a href="https://calibreapp.com">Calibre&lt;/a> as I have not used the others. I am not affiliated with them.&lt;/p>
&lt;p>Using Calibre, you can schedule Lighthouse tests, create performance budgets, see pretty charts, and learn what performance looks like in your product. The relevant information is easy to find and their product has a very polished UI, however, at a certain point, you may want more and that means ‘custom development’.&lt;/p>
&lt;h2 id="the-tooling-in-place">The tooling in place&lt;/h2>
&lt;p>We have decided to create our own tool at &lt;a href="https://thinkific.com">Thinkific&lt;/a> in order to run Lighthouse tests to be aligned with the monitoring stack and give us more flexibility. Here are some details:&lt;/p>
&lt;ul>
&lt;li>We run tests every hour;&lt;/li>
&lt;li>We run tests in our Critical User Journeys: these are important routes of our application used by different types of users;&lt;/li>
&lt;li>The report files (JSON, HTML), along with the page screenshot and HAR file are stored in S3 for future reference;&lt;/li>
&lt;li>The numbers (Lighthouse scores, assets file sizes, Web Vitals) are sent to a relational database (Postgres) and &lt;a href="https://prometheus.io/">Promotheus&lt;/a>, a monitoring system and time series database. Postgres empowers the creation of custom reports as we need and Prometheus is used with Grafana to create custom dashboards.&lt;/li>
&lt;/ul>
&lt;p>Comparing to open-source solutions, our tool is similar to &lt;a href="https://github.com/Verivox/lighthouse-monitor/">lighthouse-monitor&lt;/a>.&lt;/p>
&lt;h3 id="understanding-variability">Understanding variability&lt;/h3>
&lt;p>Running Lighthouse in our tool, we noticed the performance score changed due to inherent variability in web and network technologies, even when there hadn&amp;rsquo;t been a code change.&lt;/p>
&lt;p>Network, client hardware, and web server variabilities are some examples of how the score can trick you. &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/variability.md">Lighthouse documentation&lt;/a> clarifies all the different sources of variability and how to deal with them.&lt;/p>
&lt;p>In our case, we run Lighthouse 5 times per URL, calculating a median score. We also store the min/max values in case we want to investigate one-off results.&lt;/p>
&lt;h2 id="working-with-lighthouse-results">Working with Lighthouse results&lt;/h2>
&lt;p>What do I do when I have Lighthouse reports from 9 different URLs?&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/detective-wall.jpg" alt="Detective wall, from the Isle of Dogs movie">&lt;/p>
&lt;p>FCP, LCP, TTI, TBT, CLS: my work in the last few months is analyzing data and connecting dots. Sometimes I find low hanging fruit that improves one metric here and there, sometimes I go down the rabbit hole.&lt;/p>
&lt;p>With data coming from everywhere, I am following the scientific method to focus on what matters:&lt;/p>
&lt;ol>
&lt;li>Make an observation.&lt;/li>
&lt;li>Ask a question.&lt;/li>
&lt;li>Form a hypothesis or testable explanation.&lt;/li>
&lt;li>Make a prediction based on the hypothesis.&lt;/li>
&lt;li>Test the prediction.&lt;/li>
&lt;li>Iterate: use the results to make new hypotheses or predictions.&lt;/li>
&lt;/ol>
&lt;p>When it comes to performance, there is no silver bullet. Sometimes images are the culprits of bad performance scores, sometimes it is an architecture problem. The goal of my post is not blaming X or Y. In saying this, let me share a few thoughts on these two topics:&lt;/p>
&lt;h3 id="image-optimization">Image optimization&lt;/h3>
&lt;p>Images impact page load time since bigger images will take longer to be downloaded and as a result, it will impact different Lighthouse metrics - usually CLS, LCP.&lt;/p>
&lt;p>Recently, &lt;a href="https://github.com/vercel/next.js/discussions/16832">Google worked with Next.js&lt;/a> to create an &lt;a href="https://nextjs.org/docs/basic-features/image-optimization">Image component&lt;/a> that delivers optimized images. The framework supports image conversion from via Imgix, Cloudinary, Akamai and as expected, Vercel.&lt;/p>
&lt;p>I predict that the conversion on demand, by using third-party services as mentioned above or by using serverless solutions will become more and more popular. Starting next year, Google &lt;a href="https://developers.google.com/search/blog/2020/11/timing-for-page-experience">will include Web Vitals metrics&lt;/a> in the page ranking algorithms.&lt;/p>
&lt;h3 id="old-architectures-didnt-age-well">Old architectures didn&amp;rsquo;t age well&lt;/h3>
&lt;p>Old SPA architectures doesn&amp;rsquo;t perform well these days and Lighthouse captures that.&lt;/p>
&lt;p>Here is one example: back in the day, people (including myself) used to build their JS code into a single file. We wanted to avoid multiple files because HTTP/1.1 didn&amp;rsquo;t support too many concurrent requests, which was improved in HTTP/2. Today, unused JS will be caught in the Lighthouse tests.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/codesplitting.png" alt="Code splitting cartoon by Crystallize">&lt;/p>
&lt;p>Code Splitting is part of any modern JS tech stack using webpack and, in React, it can be combined with &lt;a href="https://loadable-components.com/docs/getting-started/">Loadable Components&lt;/a> and &lt;a href="https://reactjs.org/docs/code-splitting.html#reactlazy">&lt;code>React.lazy&lt;/code>&lt;/a>. Giving the user only what they need is key.&lt;/p>
&lt;p>In the back end, &lt;a href="https://graphql.org/">GraphQL&lt;/a> showed us that we can request data as we go. I know this can also be done with REST as long we know what is in the UI but the whole point here is to deliver only the data that users need.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>I hope this series shed some light (no pun intended) on your front-end performance skills. Lighthouse is so powerful that people out there are creating full SaaS products to make the web better.&lt;/p>
&lt;p>Are you using Lighthouse or planning to start using? Let me know in the comments!&lt;/p></description></item><item><title>Creating HAR files with Lighthouse</title><link>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 04:00:00 +0000</pubDate><guid>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/</guid><description>&lt;p>HAR (HTTP Archive) is a JSON file containing all information about a browser’s interactions with a page. This file is often used for performance analysis. &lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/06/07/using-har-files-to-analyze-performance-over-time/">Earlier this year&lt;/a>, I shared what kind of information we can get from and today we will automate the HAR creation.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/06/har-viewer.jpg" alt="HAR Viewer">&lt;/p>
&lt;p>There are different ways to automate the HAR creation: &lt;a href="https://www.npmjs.com/package/puppeteer-har">puppeteer-har&lt;/a> is a NPM package you can add in your tooling or if you are not from the JavaScript world you can use &lt;a href="https://octopus.com/blog/selenium/13-capturing-har-files/capturing-har-files">Selenium&lt;/a>.&lt;/p>
&lt;p>I was using puppeteer-har for a few months but then I noticed that the HAR was missing a few files in specific scenarios (ex. a React app with Loadable and React Router). For this reason, I decided to look for analternative and this is how I found the &lt;a href="https://www.npmjs.com/package/chrome-har-capturer">chrome-har-capturer&lt;/a> package.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>This package works like a charm; it creates a HAR file following the &lt;a href="http://www.softwareishard.com/blog/har-12-spec/">HAR 1.2 spec&lt;/a> and all that I need to provide is an array of raw events that comes from the &lt;a href="https://chromedevtools.github.io/devtools-protocol/">Chrome Debugging Protocol&lt;/a>. Who provides the raw events? Lighthouse!&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at the implementation (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> { fromLog } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-har-capturer&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> { writeFileSync } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port, emulatedFormFactor&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;desktop&amp;#39;&lt;/span>};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> url &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> { artifacts&lt;span style="color:#000;font-weight:bold">:&lt;/span> { devtoolsLogs&lt;span style="color:#000;font-weight:bold">:&lt;/span> { defaultPass } } } &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(url, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> har &lt;span style="color:#000;font-weight:bold">=&lt;/span> await fromLog(url, defaultPass);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> writeFileSync(&lt;span style="color:#d14">&amp;#39;page.har&amp;#39;&lt;/span>, JSON.stringify(har));
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>In my other posts, I shared how to use the &lt;code>lighthouse()&lt;/code> function to get all kinds of information: from web vitals metrics to page screenshots. What I didn&amp;rsquo;t mention was the function also keeps the artifacts created by the DevTools protocols. This is what we are storing in line 10 and this is the array of raw events that chrome-har-capturer needs to generate a HAR file.&lt;/p>
&lt;p>In line 12, we use the &lt;code>fromLog&lt;/code> function to build the HAR object, which we store in the file system in the following line. If you are curious about how the &lt;code>fromLog&lt;/code> function works, I would recommend reading the package source-code, in special &lt;a href="https://github.com/cyrus-and/chrome-har-capturer/blob/master/test/offline.js">one of their tests&lt;/a>.&lt;/p>
&lt;p>Next, the generated HAR is stored in &lt;code>page.har&lt;/code>. and we can use it in the &lt;a href="http://www.softwareishard.com/har/viewer/">HAR Viewer&lt;/a> for performance analysis.&lt;/p>
&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>We can extract a lot of valuable information from HAR files, such as:&lt;/p>
&lt;ul>
&lt;li>Protocols being used in the page (http 1.1, http 2, h3-29);&lt;/li>
&lt;li>Compressed/uncompressed asset sizes;&lt;/li>
&lt;li>Request timing information (ex.: waiting and downloading times);&lt;/li>
&lt;/ul>
&lt;p>With this information, we can identify bottlenecks (ex.what is the slowest request of that URL), find low-hanging fruit (ex.asset compression is one flag away in your build system tool) and prioritize tasks in order to improve performance on our pages.&lt;/p>
&lt;p>Can you think of different uses? Let me know in the comments!&lt;/p></description></item><item><title>Generating Web Vitals information with Lighthouse</title><link>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 03:00:00 +0000</pubDate><guid>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/</guid><description>&lt;p>&lt;a href="https://webmasters.googleblog.com/2020/05/evaluating-page-experience.html">Earlier this year&lt;/a>, Google announced that “page experience” would impact its search ranking. A few weeks ago, they announced that the new page experience signals will roll out in May 2021. But what are these page experience signals?&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/search-page-experience.jpg" alt="Google&amp;rsquo;s Page experience chart">&lt;/p>
&lt;p>The &lt;a href="https://developers.google.com/search/docs/guides/page-experience">page experience&lt;/a> signal measures aspects of how users perceive the experience of interacting with a web page. Offering mobile-friendly pages and serving content over HTTPS is something we have been doing for a while but soon slow sites may lose their spot in the Google page ranking algorithm.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="what-are-core-web-vitals">What are Core Web Vitals&lt;/h2>
&lt;p>&lt;a href="https://web.dev/vitals/#core-web-vitals">From Google&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Core Web Vitals are the subset of Web Vitals that apply to all web pages, should be measured by all site owners, and will be surfaced across all Google tools. &lt;strong>Each of the Core Web Vitals represents a distinct facet of the user experience&lt;/strong>, is measurable in the field, and reflects the real-world experience of a critical user-centric outcome.&lt;/p>
&lt;/blockquote>
&lt;p>The three facets are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Loading&lt;/strong>: &lt;em>how fast is this page?&lt;/em> &lt;a href="https://web.dev/cls/">Largest Contentful Paint&lt;/a> measures perceived load speed and marks the point on the page load timeline when the page’s main content has likely loaded.&lt;/li>
&lt;li>&lt;strong>Interactivity&lt;/strong>: &lt;em>how fast does the page react to user input?&lt;/em> &lt;a href="https://web.dev/fid/">First Input Delay&lt;/a> measures responsiveness and quantifies the experience users feel when trying to first interact with the page.&lt;/li>
&lt;li>&lt;strong>Visual stability&lt;/strong>: &lt;em>does the page layout change while the page is loading?&lt;/em> &lt;a href="https://web.dev/cls/">Cumulative Layout Shift&lt;/a> measures visual stability and quantifies the amount of unexpected layout shift of visible page content.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/core-web-vitals.png" alt="Core Web Vitals">&lt;/p>
&lt;p>All of Google&amp;rsquo;s popular tools for developers support measurement of Core Web Vitals, including &lt;a href="https://github.com/GoogleChrome/lighthouse">Lighthouse&lt;/a>, &lt;a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights&lt;/a>, &lt;a href="https://developers.google.com/web/tools/chrome-devtools">Chrome DevTools&lt;/a>, &lt;a href="https://search.google.com/search-console/about">Search Console&lt;/a>, &lt;a href="https://leonardofaria.github.io/leonardofaria.net/measure/">web.dev&amp;rsquo;s measure tool&lt;/a>, the &lt;a href="https://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma">Web Vitals Chrome extension&lt;/a> and the new &lt;a href="https://developers.google.com/web/tools/chrome-user-experience-report">Chrome UX Report&lt;/a> API.&lt;/p>
&lt;p>It is important to mention that FID can&amp;rsquo;t be measured in Lighthouse and as an alternative, Google recommends measuring the &lt;a href="https://web.dev/tbt/">Total Blocking Time (TBT)&lt;/a>. Tools like Lighthouse that load pages in a simulated environment without a user can not measure FID, since a simulated environment has no user input.&lt;/p>
&lt;h2 id="using-lighthouse-for-core-web-vitals-measurements">Using Lighthouse for Core Web Vitals measurements&lt;/h2>
&lt;p>The Web Vitals information is very easily found in the Lighthouse reports:&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse-web-vitals-report.jpg" alt="Web Vitals information in Lighthouse report">&lt;/p>
&lt;p>What I want to share today is how to get Web Vitals information from the Lighthouse node package (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port, emulatedFormFactor&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;desktop&amp;#39;&lt;/span>};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> { lhr&lt;span style="color:#000;font-weight:bold">:&lt;/span> { audits } } &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> webVitals &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> largestContentfulPaint&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;largest-contentful-paint&amp;#39;&lt;/span>].numericValue,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span> cumulativeLayoutShift&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;cumulative-layout-shift&amp;#39;&lt;/span>].numericValue,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> totalBlockingTime&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;total-blocking-time&amp;#39;&lt;/span>].numericValue,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> largestContentfulPaintElement&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;largest-contentful-paint-element&amp;#39;&lt;/span>].details.items[&lt;span style="color:#099">0&lt;/span>].node.snippet,
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> layoutShiftElements&lt;span style="color:#000;font-weight:bold">:&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;layout-shift-elements&amp;#39;&lt;/span>].details.items.map(({ node }) =&amp;gt; node.snippet).toString(),
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span> };
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span> console.log(webVitals);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The information highlighted in the image above can be found in lines 9 - 14. The output of the script:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">{
largestContentfulPaint&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">3429.8639999999996&lt;/span>,
cumulativeLayoutShift&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">0.0002832719606426758&lt;/span>,
totalBlockingTime&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">0&lt;/span>,
largestContentfulPaintElement&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;lt;header id=&amp;#34;header&amp;#34; class=&amp;#34;header flex w-full m-0 bg-cover bg-top-center&amp;#34; style=&amp;#34;background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.55))…&amp;#34;&amp;gt;&amp;#39;&lt;/span>,
layoutShiftElements&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;lt;div id=&amp;#34;nav-menu&amp;#34; class=&amp;#34;absolute lg:p-6 hidden lg:block self-end text-white rounded-md bg-black sh…&amp;#34;&amp;gt;,&amp;lt;a href=&amp;#34;https://leonardofaria.net/&amp;#34; class=&amp;#34;tracking-tighter text-4xl font-semibold flex flex-shrink-0 text-center px-…&amp;#34;&amp;gt;&amp;#39;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For LCP, CLS and TBT, the output is not including a numeric unit, only the value. The goal here is to get a numeric value so we can manipulate data; for example, sorting or finding minimum / maximum values. If data manipulation is not the main goal, using the displayValue property instead of numericValue may work better. Example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">{
largestContentfulPaint&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;2.4 s&amp;#39;&lt;/span>,
cumulativeLayoutShift&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;0&amp;#39;&lt;/span>,
totalBlockingTime&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;30 ms&amp;#39;&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The two last properties of the webVitals object return strings containing HTML node. The intention of reporting these elements is to facilitate the identification of the villains of the page being tested.&lt;/p>
&lt;p>Bad Largest Contentful Paint metric can be caused for one or more of the following:&lt;/p>
&lt;ul>
&lt;li>Slow server response times;&lt;/li>
&lt;li>Render-blocking JavaScript and CSS;&lt;/li>
&lt;li>Slow resource load times;&lt;/li>
&lt;li>Client-side rendering.&lt;/li>
&lt;/ul>
&lt;p>In the example, the largest contentful paint element is a header with a hero image. This element contains an external background image and the image is the culprit causing the slow rendering? time.&lt;/p>
&lt;p>Bad Cumulative Layout Shift metrics can be caused for one or more of the following:&lt;/p>
&lt;ul>
&lt;li>Images without dimensions;&lt;/li>
&lt;li>Ads, embeds, iframes without dimensions;&lt;/li>
&lt;li>Dynamically injected content;&lt;/li>
&lt;li>Web fonts causing FOIT/Fout.&lt;/li>
&lt;/ul>
&lt;p>The page used in the example uses Google Fonts and there is a tiny layout shift when the font is loaded. The shift may be noticeable by users and it is reported in the layout shift elements property.&lt;/p>
&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>This script is useful in order to closely follow what is changing in the web vitals metrics of a page. In my case, I store the LCP, TBT and CLS numeric values in a database and use this information in a Gauge dashboard. I am not tracking the largest contentful paint element or layout shift elements yet.&lt;/p>
&lt;p>Can you think of different use cases? Let me know in the comments!&lt;/p></description></item><item><title>Generating screenshots with Lighthouse</title><link>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 02:00:00 +0000</pubDate><guid>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/</guid><description>&lt;p>Lighthouse captures the rendering timeline of a page in 10 images. Do you need to store them? If yes, keep reading in order to learn how to store these images.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse-screenshots.jpg" alt="Lighthouse screenshots">&lt;/p>
&lt;p>The filmstrip above reveals how a page is rendered in a browser and gives us an opportunity to understand what is slow. For example, blank screenshots in the beginning is a sign that the &lt;a href="https://web.dev/fcp/">First Contentful Paint&lt;/a> is too slow.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>In this post you will learn where these images are stored and how to store them in a file system. Here is the script (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> { writeFileSync } &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> { lhr&lt;span style="color:#000;font-weight:bold">:&lt;/span> { audits } } &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;screenshot-thumbnails&amp;#39;&lt;/span>].details.items
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span> .forEach(({ timing, data }) =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> &lt;span style="color:#000;font-weight:bold">debugger&lt;/span>;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> screenshot &lt;span style="color:#000;font-weight:bold">=&lt;/span> data.split(&lt;span style="color:#d14">&amp;#39;;base64,&amp;#39;&lt;/span>).pop();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> screenshotFile &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`screenshot-&lt;/span>&lt;span style="color:#d14">${&lt;/span>timing&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">ms.jpg`&lt;/span>;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span> writeFileSync(screenshotFile, screenshot, { encoding&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;base64&amp;#39;&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> finalScreenshotFile &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">`screenshot-final.jpg`&lt;/span>;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> finalScreenshot &lt;span style="color:#000;font-weight:bold">=&lt;/span> audits[&lt;span style="color:#d14">&amp;#39;final-screenshot&amp;#39;&lt;/span>].details.data.split(&lt;span style="color:#d14">&amp;#39;;base64,&amp;#39;&lt;/span>).pop();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span> writeFileSync(finalScreenshotFile, finalScreenshot, { encoding&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;base64&amp;#39;&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let’s dig into the magic. Starting in line 10, we loop in the screenshot-thumbnails audit the images captured by Lighthouse. Notice that images are encoded in the &lt;a href="https://en.wikipedia.org/wiki/Base64">Base64 format&lt;/a>, and along with their content, Lighthouse also stores when they happen.&lt;/p>
&lt;p>The script will create 11 image files as shown below.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse-screenshots-finder.jpg" alt="Screenshots created by Lighthouse">&lt;/p>
&lt;h3 id="desktop-dimensions">Desktop dimensions&lt;/h3>
&lt;p>By default, the device emulated in Lighthouse is a Moto G4, with a 5.5 inches screen (1920 x 1080). We can tweak that and emulate a Desktop by setting the &lt;code>emulatedFormFactor&lt;/code> to &lt;code>desktop&lt;/code>. The options variable will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port, emulatedFormFactor&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;desktop&amp;#39;&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>This script is useful in order to closely follow what is being rendered on a page or web app. In my particular case, I am storing only the final screenshot for future reference (ex. is this the right page?).&lt;/p>
&lt;p>Can you think of different uses? Let me know in the comments!&lt;/p></description></item><item><title>Getting asset transferred information with Lighthouse</title><link>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/</link><pubDate>Mon, 30 Nov 2020 01:00:00 +0000</pubDate><guid>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/</guid><description>&lt;p>Have you ever about thought tracking what is added to a page or web app? Did not know how your website became 15MB? Sounds like it is time to track this data!&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/asset-transfered-by-type.jpg" alt="Chart showing assets transferred by type">&lt;/p>
&lt;p>&lt;a href="https://calibreapp.com/">Calibre&lt;/a>, one of my favourite web performance tools, creates charts, such as the one above, to illustrate what is being transferred to users when they visit your page or use your web app.&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Hi! This post is part of a Lighthouse post series. Also, check out:&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>In this post you will learn how to collect similar data using Lighthouse. Here is the recipe (from my &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> runnerResult &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://leonardofaria.net&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> assets &lt;span style="color:#000;font-weight:bold">=&lt;/span> {};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> runnerResult.lhr.audits[&lt;span style="color:#d14">&amp;#39;resource-summary&amp;#39;&lt;/span>].details.items
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span> .filter(({ transferSize }) =&amp;gt; transferSize &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#099">0&lt;/span>)
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> .forEach(({ resourceType, transferSize }) =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span> assets[resourceType] &lt;span style="color:#000;font-weight:bold">=&lt;/span> transferSize;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> });
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span> console.log(assets);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The script is very straightforward: we import Lighthouse and Chrome Launcher (lines 1-2) and run the audit against the URL, storing its results in the &lt;code>runnerResult&lt;/code> variable.&lt;/p>
&lt;p>The &lt;code>runnerResult&lt;/code> variable stores 3 main objects:&lt;/p>
&lt;ul>
&lt;li>&lt;code>lhr&lt;/code>: Lighthouse Result Object contains run metadata (Lighthouse version, fetch time) and the audit results&lt;/li>
&lt;li>&lt;code>artifacts&lt;/code>: The data used by the audit&lt;/li>
&lt;li>&lt;code>report&lt;/code>: A JSON/HTML/CSV report&lt;/li>
&lt;/ul>
&lt;p>The magic starts happening in line 10: we dig into the results of the audits and get information from the resource summary audit (line 16). The output of the script is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">{
total&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">400584&lt;/span>,
image&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">321981&lt;/span>,
font&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">36954&lt;/span>,
script&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">27788&lt;/span>,
&lt;span style="color:#0086b3">document&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">7912&lt;/span>,
stylesheet&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">5274&lt;/span>,
other&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">675&lt;/span>,
&lt;span style="color:#d14">&amp;#39;third-party&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">66493&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If this is not enough information, and you also want to include the number of requests, you can just return the &lt;code>items&lt;/code> object and skip all filter and loop steps: &lt;code>runnerResult.lhr.audits['resource-summary'].details.items&lt;/code>.&lt;/p>
&lt;p>The image above shows what is inside the &lt;code>resource-summary&lt;/code> audit:&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse-audit-object.jpg" alt="audit object">&lt;/p>
&lt;blockquote>
&lt;p>Curious to know how the JSON is shown in the image? This is how Firefox renders JSON files by default. I really wish other browsers implemented this by default.&lt;/p>
&lt;/blockquote>
&lt;h2 id="why-do-we-need-this">Why do we need this?&lt;/h2>
&lt;p>This script is useful in order to closely follow what is being sent to users. In my case, this data is stored daily and is used to identify if new features added in the codebase dramatically impact the page rendering.&lt;/p>
&lt;p>Can you think of different applications of this tool? Let me know in the comments!&lt;/p></description></item><item><title>The undocumented Lighthouse guide</title><link>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://leonardofaria.github.io/leonardofaria.net/2020/11/30/the-undocumented-lighthouse-guide/</guid><description>&lt;p>Lighthouse is the go-to tool for improving the quality of web pages. Lately, I have been using Lighthouse a lot at &lt;a href="https://thinkific.com">work&lt;/a> to identify opportunities for performance optimizations. This post is part of a 6 part series that I have written about how to get the most out of Lighthouse.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse.jpg" alt="Lighthouse photo by Robert Wiedemann">&lt;/p>
&lt;div class="my-10 p-4 border border-gray-6 rounded-md bg-white">
&lt;strong>Lighthouse Post Series&lt;/strong>
&lt;ul>
&lt;li>&lt;a href="#quick-lighthouse-intro">Quick Lighthouse intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-lighthouse-node-package">The Lighthouse Node package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="quick-lighthouse-intro">Quick Lighthouse intro&lt;/h2>
&lt;p>Lighthouse is an &lt;a href="https://github.com/GoogleChrome/lighthouse">open-source&lt;/a> automated tool for auditing the quality of web pages. This tool generates scores for performance, accessibility, progressive web apps, SEO, and best practices of a specific URL. Lighthouse also offers recommendations on how to improve the inefficient items of the audits.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse-report-leonardofaria-net.jpg" alt="Lighthouse report for leonardofaria.net">&lt;/p>
&lt;p>The recommendations offered by Lighthouse are invaluable in helping to clarify what can be done to improve the quality of a page or web app. Based on their recommendations, developers can inform Product Managers, as well as other stakeholders, and prioritize the most important/impactful tasks from there.&lt;/p>
&lt;p>There are different ways to run Lighthouse audits:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/speed/pagespeed/insights/">From a web UI&lt;/a>: Run Lighthouse via PageSpeed Insights&lt;/li>
&lt;li>&lt;a href="https://developers.google.com/web/tools/lighthouse#devtools">In Chrome DevTools&lt;/a>: Open the tab Audit in the Chrome DevTools - a quick way to audit pages behind authentication&lt;/li>
&lt;li>&lt;a href="https://developers.google.com/web/tools/lighthouse#cli">From the command line&lt;/a>: Install the &lt;code>lighthouse&lt;/code> CLI and start testing&lt;/li>
&lt;li>&lt;a href="https://github.com/GoogleChrome/lighthouse">As a Node module&lt;/a>: Add the &lt;code>lighthouse&lt;/code> module in Node scripts&lt;/li>
&lt;/ul>
&lt;p>This series of posts will cover the usage of Lighthouse as a Node module. At my workplsvr, I have created a JavaScript tool which runs every hour to programmatically audit 9 critical parts of our applications. The results are stored in a Postgres database and in Prometheus (a monitoring system &amp;amp; time-series database) so we can follow the reports over time.&lt;/p>
&lt;h2 id="the-lighthouse-node-package">The Lighthouse Node package&lt;/h2>
&lt;p>The Lighthouse docs present a &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/readme.md#using-programmatically">basic example of how to start our journey&lt;/a>. Please see below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> fs &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> lighthouse &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;lighthouse&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span style="color:#000;font-weight:bold">const&lt;/span> chromeLauncher &lt;span style="color:#000;font-weight:bold">=&lt;/span> require(&lt;span style="color:#d14">&amp;#39;chrome-launcher&amp;#39;&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>(async () =&amp;gt; {
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> chrome &lt;span style="color:#000;font-weight:bold">=&lt;/span> await chromeLauncher.launch({chromeFlags&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;--headless&amp;#39;&lt;/span>]});
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {logLevel&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;info&amp;#39;&lt;/span>, output&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;html&amp;#39;&lt;/span>, onlyCategories&lt;span style="color:#000;font-weight:bold">:&lt;/span> [&lt;span style="color:#d14">&amp;#39;performance&amp;#39;&lt;/span>], port&lt;span style="color:#000;font-weight:bold">:&lt;/span> chrome.port};
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> runnerResult &lt;span style="color:#000;font-weight:bold">=&lt;/span> await lighthouse(&lt;span style="color:#d14">&amp;#39;https://example.com&amp;#39;&lt;/span>, options);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span> &lt;span style="color:#998;font-style:italic">// `.report` is the HTML report as a string
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> reportHtml &lt;span style="color:#000;font-weight:bold">=&lt;/span> runnerResult.report;
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span> fs.writeFileSync(&lt;span style="color:#d14">&amp;#39;lhreport.html&amp;#39;&lt;/span>, reportHtml);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span> &lt;span style="color:#998;font-style:italic">// `.lhr` is the Lighthouse Result as a JS object
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> console.log(&lt;span style="color:#d14">&amp;#39;Report is done for&amp;#39;&lt;/span>, runnerResult.lhr.finalUrl);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span> console.log(&lt;span style="color:#d14">&amp;#39;Performance score was&amp;#39;&lt;/span>, runnerResult.lhr.categories.performance.score &lt;span style="color:#000;font-weight:bold">*&lt;/span> &lt;span style="color:#099">100&lt;/span>);
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span> await chrome.kill();
&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>})();
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The first 3 lines import required packages: &lt;code>fs&lt;/code> for file system manipulation; &lt;code>lighthouse&lt;/code>, the main audit package; and &lt;code>chrome-launcher&lt;/code>, a package used for launching Chrome. Lighthouse needs to know which port has a Chrome instance running, so this audit can happen.&lt;/p>
&lt;p>Line 7 surfaces a few Lighthouse options, like &lt;code>logLevel&lt;/code> (&lt;code>silent | error | info |verbose&lt;/code>), &lt;code>output&lt;/code> (&lt;code>json | html | csv&lt;/code>) and &lt;code>onlyCategories&lt;/code> (an array filtering the tests you want to run). Their &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/888bd6dc9d927a734a8e20ea8a0248baa5b425ed/typings/externs.d.ts#L82-L119">type definitions file&lt;/a> showcase all the offered options.&lt;/p>
&lt;p>Next, the test is stored in the &lt;code>runnerResult&lt;/code> variable (line 8). The &lt;code>runnerResult&lt;/code> is an object that contains an HTML report, which is stored in the disk (lines 11-12). This result object is the main topic of my next few posts. There we will learn how to get relevant information from the audits.&lt;/p>
&lt;p>Afterwards, the terminal will show the tested URL and its performance score (lines 15-16) and lastly, the Chrome instance will be closed.&lt;/p>
&lt;p>&lt;img src="https://leonardofaria.github.io/leonardofaria.net/wp-content/uploads/2020/11/lighthouse-example-com-report.jpg" alt="Lighthouse report">&lt;/p>
&lt;p>The HTML report is slightly different from the initial report of the post: only performance is audited as it was defined in the options.&lt;/p>
&lt;h2 id="conclusions-and-up-next">Conclusions and up next&lt;/h2>
&lt;p>This post covered what Lighthouse is, why to use it, and how to use it programmatically.&lt;/p>
&lt;p>The snippet from this blog post can be found in the &lt;a href="https://github.com/leonardofaria/lighthouse-examples">lighthouse-examples GitHub repository&lt;/a>. From here you can check out different recipes in the &lt;a href="https://github.com/GoogleChrome/lighthouse#docs--recipes">Lighthouse docs&lt;/a> or keep reading the ones I have created:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-asset-transferred-information-with-lighthouse/">Getting asset transferred information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/generating-screenshots-with-lighthouse/">Generating screenshots with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/getting-web-vitals-information-with-lighthouse/">Getting Web Vitals information with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/creating-har-files-with-lighthouse/">Generating HAR files with Lighthouse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leonardofaria.github.io/leonardofaria.net/2020/11/30/my-experience-using-lighthouse-in-the-real-world/">My experience using Lighthouse in the real world&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&amp;ndash;&lt;/p>
&lt;p>Photo by &lt;a href="https://unsplash.com/@antilumen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText">Robert Wiedemann&lt;/a> on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText">Unsplash&lt;/a>&lt;/p></description></item></channel></rss>